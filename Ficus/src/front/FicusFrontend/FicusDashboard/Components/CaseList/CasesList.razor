@using FicusDashboard.Components.SidebarList
@using FicusDashboard.Components.TreeView
@using FicusDashboard.Services.Cases
@using FicusDashboard.Utils
@using JetBrains.Collections.Viewable
@using JetBrains.Lifetimes
@inherits ComponentBase;

<div style="width: 250px; height: 100%; overflow: auto; background: var(--processes-section-cases-collapsed-bakground-darker)">
  <div style="width: fit-content">
    @if (myRootItem is { })
    {
      <TreeView Items="@myRootItem.InnerItems.Values.ToList()"
                TreeViewItemClickHandler="@HandleTreeViewItemClicked"></TreeView> 
    }
  </div>
</div>

@code
{
  private static Key<Case> LeafTreeItemCase { get; } = new Key<Case>(nameof(LeafTreeItemCase));
  
  private readonly LifetimeDefinitionsByKey<string> myProcessesLifetimes = new();
  private readonly LifetimeDefinitionsByKey<string> myCasesLifetimes = new();
  private readonly SequentialLifetimes mySequentialLifetimes = new(Lifetime.Eternal);

  private TreeViewItem? myRootItem;
  private Pipeline? mySelectedPipeline;
  private Lifetime myCurrentPipelineLifetime;
  private Case? mySelectedCase;


  [Parameter] public required Action<ProcessData, Case> CaseSelected { get; set; }
  [Parameter] public required Pipeline SelectedPipeline { get; set; }


  private void HandleTreeViewItemClicked(TreeViewItem obj)
  {
    if (!obj.UserData.TryGetData(LeafTreeItemCase, out var @case)) return;

    mySelectedCase = @case;
    CaseSelected(@case.ParentProcess, @case);
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (ReferenceEquals(mySelectedPipeline, SelectedPipeline)) return;

    myRootItem = ConstructTreeViewRootItem();
    mySelectedPipeline = SelectedPipeline;
    myCurrentPipelineLifetime = mySequentialLifetimes.Next();
    mySelectedPipeline.Processes.AdviseAddRemove(myCurrentPipelineLifetime, HandleProcessAddRemove);

    StateHasChanged();
  }

  private class CaseNamePart(string namePart)
  {
    public string NamePart { get; } = namePart;
    public Case? Case { get; set; }

    public Dictionary<string, CaseNamePart> Children { get; } = [];


    public CaseNamePart GetOrAdd(string name)
    {
      if (Children.TryGetValue(name, out var nextNamePart))
      {
        return nextNamePart;
      }

      var newNamePart = new CaseNamePart(name);
      Children[name] = newNamePart;
      return newNamePart;
    }
  }

  private TreeViewItem ConstructTreeViewRootItem()
  {
    var rootPart = new CaseNamePart("root");
    foreach (var (_, process) in SelectedPipeline.Processes)
    {
      AddCaseNamePartForProcess(rootPart, process);
    }

    var rootItem = new TreeViewItem
    {
      InnerItems = [],
      Parent = null,
      DisplayName = "Processes",
      Id = "Processes",
      IsExpanded = true
    };

    foreach (var (_, caseNamePart) in rootPart.Children)
    {
      AddCaseNamePart(rootItem, caseNamePart);
    }

    return rootItem;
  }

  private static void AddCaseNamePartForProcess(CaseNamePart rootPart, ProcessData process)
  {
    var processPart = rootPart.GetOrAdd(process.ProcessName);

    foreach (var (_, currentCase) in process.ProcessCases)
    {
      var currentPart = processPart;
      foreach (var namePart in currentCase.NameParts)
      {
        currentPart = currentPart.GetOrAdd(namePart);
      }

      currentPart.Case = currentCase;
    }
  }

  private static void AddCaseNamePart(TreeViewItem item, CaseNamePart part)
  {
    if (item.InnerItems.TryGetValue(part.NamePart, out var treeItemChild))
    { 
      foreach (var (_, caseNamePart) in part.Children)
      { 
        AddCaseNamePart(treeItemChild, caseNamePart);
      }

      return;
    }
    
    var newTreeViewItem = new TreeViewItem
    {
      InnerItems = [],
      Parent = item,
      DisplayName = part.NamePart,
      Id = part.NamePart,
      IsExpanded = true
    };

    if (part.Case is { } @case)
    {
      newTreeViewItem.UserData.PutData(LeafTreeItemCase, @case);
    }
    
    newTreeViewItem.UserData.PutData(ComponentsKeys.ProcessingStateKey, ItemProcessingState.New);
    
    foreach (var (_, child) in part.Children)
    {
      AddCaseNamePart(newTreeViewItem, child);
    }
    
    item.InnerItems[part.NamePart] = newTreeViewItem;
  }
  
  private void HandleProcessAddRemove(AddRemove addRemove, string key, ProcessData? process)
  {
    if (process is null) return;

    switch (addRemove)
    {
      case AddRemove.Add:
      {
        var processLifetime = myProcessesLifetimes.CreateNested(key, myCurrentPipelineLifetime);
        process.ProcessCases.AdviseAddRemove(processLifetime, HandleCaseAddRemove);

        break;
      }
      case AddRemove.Remove:
      {
        myProcessesLifetimes.TerminateAndRemove(key);
        myRootItem?.InnerItems.Remove(process.ProcessName);

        break;
      }
      default:
        throw new ArgumentOutOfRangeException(nameof(addRemove), addRemove, null);
    }

    StateHasChanged();
  }

  private void HandleCaseAddRemove(AddRemove caseAddRemove, string caseKey, Case? caseModel)
  {
    if (caseModel is null) return;

    switch (caseAddRemove)
    {
      case AddRemove.Add:
      {
        var processLifetime = myProcessesLifetimes.Get(caseModel.ParentProcess.ProcessName);
        var caseLifetime = myCasesLifetimes.CreateNested(caseKey, processLifetime);
        caseModel.ExecutionResultsChanged.Advise(caseLifetime, _ => HandleCaseContextValuesChange(caseKey, caseModel));

        if (myRootItem is { })
        {
          var rootPart = new CaseNamePart("root");
          AddCaseNamePartForProcess(rootPart, caseModel.ParentProcess);
          AddCaseNamePart(myRootItem, rootPart.Children.Values.First()); 
        }
        
        break;
      }
      case AddRemove.Remove:
      {
        myCasesLifetimes.TerminateAndRemove(caseKey);

        break;
      }
      default:
        throw new ArgumentOutOfRangeException(nameof(caseAddRemove), caseAddRemove, null);
    }

    StateHasChanged();
  }

  private void HandleCaseContextValuesChange(string caseKey, Case caseModel)
  {
    if (ReferenceEquals(caseModel, mySelectedCase)) return;
    //if (!myProcesses.TryGetValue(caseModel.ParentProcess.ProcessName, out var collectionItemInfo)) return;
    
    //collectionItemInfo.InnerItems[caseKey].InnerItem.UserData.PutData(ComponentsKeys.ProcessingStateKey, ItemProcessingState.Updated);
    StateHasChanged();
  }
}