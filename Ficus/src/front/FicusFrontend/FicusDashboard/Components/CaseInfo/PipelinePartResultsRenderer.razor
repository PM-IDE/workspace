@using Ficus
@using FicusDashboard.Services.Cases
@using FicusDashboard.Utils
@using FicusDashboard.Components.CaseInfo.ContextValues.LogTimeline
@using FicusDashboard.Components.CaseInfo.ContextValues.EventLogInfo
@using FicusDashboard.Components.CaseInfo.ContextValues.ColorsLog
@using FicusDashboard.Components.CaseInfo.ContextValues.Canvas.PetriNet
@using FicusDashboard.Components.CaseInfo.ContextValues.Canvas.Graph
@using FicusDashboard.Components.CaseInfo.ContextValues
@using FicusDashboard.Layout.Models
@using JetBrains.Lifetimes

@inject IJSRuntime Js
@inject ILogger<CaseInfo> Logger

<div id="@myContainerId" class="@ContainerClass">
  <div class="pipeline-part-name-outer-container">
    <div class="pipeline-part-name-container" @onclick="_ => HandleExecutionResultTitleClicked(Results)">
      <div class="pipeline-part-name-index">
        @(Index + 1)
      </div>
      <div class="pipeline-part-name-icon">
        <img src="images/pipeline_part.svg" alt="Pipeline part icon"/>
      </div>
      <div class="pipeline-part-name">
        @Results.PipelinePartName
      </div>
    </div>
    @if (myIsFullScreen)
    {
      <div class="pipeline-part-result-fullscreen-button" @onclick="ExitFullScreen">
        Exit
      </div>
    }
    else
    {
      <div class="pipeline-part-result-fullscreen-button" @onclick="OpenElementInFullscreen">
        Full Screen
      </div>
    }
  </div>

  @if (Results.Results.Count > 1)
  {
    <div class="pipeline-part-result-selection-buttons-container">
      @for (var index = 0; index < Results.Results.Count; ++index)
      {
        var currentIndex = index;
        var selectedClass = mySelectedExecutionResultIndex == index ? "pipeline-part-result-selection-button-selected" : string.Empty;
        var buttonClass = "pipeline-part-result-selection-button " + selectedClass;

        <div class="@buttonClass" @onclick="@(e => HandleIndexSelection(currentIndex))">
          @index
        </div>
      }
    </div> 
  }

  @{
    var expanded = IsExpanded(Results);

    string GetClass(string baseClass, string expandedClass)
    {
      return $"{baseClass} {(expanded ? expandedClass : string.Empty)}";
    }

    var outerContainerClass = GetClass("pipeline-part-context-values-outer-container", "outer-container-checked");
    var innerContainerClass = GetClass("pipeline-part-context-values-inner-container", "inner-container-checked");
  }

  <div class="@outerContainerClass @(myIsFullScreen ? "container-fullscreen" : string.Empty)">
    <div class="@innerContainerClass @(myIsFullScreen ? "container-fullscreen" : string.Empty)">
      @{
        var contextValues = Results.Results[mySelectedExecutionResultIndex].ContextValues;
      }

      @foreach (var fragment in CreateRenderersFor(Results.PipelinePartName, contextValues))
      {
        @fragment
      }
    </div>
  </div>
</div>

@code {
  private static readonly Key<bool> ourExpandedKey = new(nameof(ourExpandedKey));


  private readonly Guid myContainerId = Guid.NewGuid();


  private bool myIsFullScreen;
  private int mySelectedExecutionResultIndex;


  private string ContainerClass =>
    myIsFullScreen ? "container-fullscreen" : "pipeline-parts-context-values-inner-container";


  [Parameter] public required Lifetime Lifetime { get; init; }
  [Parameter] public required ProcessCaseData ProcessCaseData { get; init; }
  [Parameter] public required int Index { get; init; }
  [Parameter] public required PipelinePartExecutionResults Results { get; init; }


  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    Results.Results.Change.Advise(Lifetime, _ => StateHasChanged());
  }

  private void HandleIndexSelection(int index)
  {
    mySelectedExecutionResultIndex = index;
    StateHasChanged();
  }

  private bool IsExpanded(PipelinePartExecutionResults results)
  {
    return results.UserData.GetOrCreate(ourExpandedKey, static () => true);
  }

  private void HandleExecutionResultTitleClicked(PipelinePartExecutionResults results)
  {
    results.UserData.PutData(ourExpandedKey, !results.UserData.GetOrCreate(ourExpandedKey, static () => true));
    StateHasChanged();
  }
  
  private IEnumerable<RenderFragment> CreateRenderersFor(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    return contextValues switch
    {
      [var singleValue] => [FindRendererFor(singleValue)],
      _ => FindRenderersFor(pipelinePartName, contextValues)
    };
  }

  private RenderFragment FindRendererFor(ContextValueWrapper wrapper)
  {
    var contextValue = wrapper.Value.Value;

    return contextValue.ContextValueCase switch
    {
      GrpcContextValue.ContextValueOneofCase.LogTimelineDiagram => @<LogTimelineRenderer @key="wrapper.Id"
                                                                                         TimelineDiagram="contextValue.LogTimelineDiagram"/>,
      GrpcContextValue.ContextValueOneofCase.EventLogInfo => @<EventLogInfoRenderer
                                                               EventLogInfo="contextValue.EventLogInfo"/>,
      GrpcContextValue.ContextValueOneofCase.ColorsLog => @<DefaultColorsLogRenderer @key="wrapper.Id"
                                                                                     Log="contextValue.ColorsLog"/>,
      GrpcContextValue.ContextValueOneofCase.PetriNet => @<PetriNetRenderer @key="wrapper.Id"
                                                                            IsFullScreen="@myIsFullScreen"
                                                                            PetriNet="contextValue.PetriNet"/>,
      GrpcContextValue.ContextValueOneofCase.Graph => @<GraphRenderer @key="wrapper.Id" 
                                                                      IsFullScreen="@myIsFullScreen"
                                                                      Graph="contextValue.Graph"
                                                                      ProcessCaseData="ProcessCaseData"/>,

      _ => @<RendererNotFoundComponent ContextValueType="@contextValue.ContextValueCase.ToString()"/>
    };
  }

  private IEnumerable<RenderFragment> FindRenderersFor(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    if (PipelinePartsGroups.GraphAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedGraphRenderer(pipelinePartName, contextValues) is { } graphRenderer)
    {
      return [graphRenderer];
    }

    if (PipelinePartsGroups.PetriNetsAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedPetriNetRenderer(pipelinePartName, contextValues) is { } petriNetRenderer)
    {
      return [petriNetRenderer];
    }

    return [];
  }

  private RenderFragment? CreateAnnotatedGraphRenderer(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    var graphPair = Logger.TryGetContextValue(pipelinePartName, contextValues, GrpcContextValue.ContextValueOneofCase.Graph, c => c.Graph);
    var annotationPair = Logger.TryGetContextValue(pipelinePartName, contextValues, GrpcContextValue.ContextValueOneofCase.Annotation, c => c.Annotation);

    if (graphPair is not var (graphId, graph)) return null;

    var componentId = CreateEntityAnnotationId(graphId, annotationPair);

    return @<GraphRenderer @key="componentId"
                           IsFullScreen="@myIsFullScreen"
                           Graph="graph" 
                           ProcessCaseData="ProcessCaseData"
                           Annotation="annotationPair?.Item2"/>;
  }

  private string CreateEntityAnnotationId(Guid id, (Guid, GrpcAnnotation)? annotationPair)
  {
    return annotationPair switch
    {
      var (annotationId, _) => id.ToString() + annotationId,
      null => id.ToString()
    };
  }

  private RenderFragment? CreateAnnotatedPetriNetRenderer(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    var petriNetPair = Logger.TryGetContextValue(pipelinePartName, contextValues, GrpcContextValue.ContextValueOneofCase.PetriNet, c => c.PetriNet);
    var annotationPair = Logger.TryGetContextValue(pipelinePartName, contextValues, GrpcContextValue.ContextValueOneofCase.Annotation, c => c.Annotation);

    if (petriNetPair is not var (petriNetId, petriNet)) return null;

    var componentId = CreateEntityAnnotationId(petriNetId, annotationPair);

    return @<PetriNetRenderer @key="componentId" IsFullScreen="@myIsFullScreen" PetriNet="petriNet" Annotation="annotationPair?.Item2"/>;
  }

  private async Task OpenElementInFullscreen()
  {
    await Js.InvokeVoidAsync("openFullScreen", myContainerId);
    myIsFullScreen = true;
    StateHasChanged();
  }

  private async Task ExitFullScreen()
  {
    await Js.InvokeVoidAsync("exitFullScreen");
    myIsFullScreen = false;
    StateHasChanged();
  }
}