@using System.Collections.ObjectModel
@using FicusDashboard.Layout.Models
@using FicusDashboard.Services.Cases
@using JetBrains.Lifetimes

@inherits ComponentBase

@inject ILogger<CaseInfo> Logger;
@inject ISubscriptionsService SubscriptionsService;

@{
  var title = myProcessCaseData switch
  {
    { } => myProcessCaseData.ProcessData.ProcessName + " " + myProcessCaseData.Case.DisplayName,
    _ => "The case was not yet selected."
  };
}

<PageTitle>@title</PageTitle>

<div class="case-info-header-container">
  <div class="case-info-header-first-line">
    <div>
      <img src="images/case.svg" alt="List"/>
    </div>
    <div class="case-info-header-first-line-case">
      Case:
    </div>
  </div>
  <div class="case-info-header centered-text">
    @title
  </div>
  <div class="case-info-header-hierarchy-container">
    @if (myProcessCaseData is { Case.NameParts: var nameParts })
    {
      <CaseNameHierarchy NameParts="nameParts" FontSize="14" Expanded="true"/>
    }
  </div>
</div>

<div class="pipeline-parts-context-values-outer-container">
  @foreach (var (index, (_, results)) in myPipelinePartsExecutionResults.OrderBy(x => x.Value.Order).Index())
  {
    <PipelinePartResultsRenderer Results="results"
                                 Lifetime="myCurrentLifetime"
                                 Index="index"
                                 ProcessCaseData="myProcessCaseData"/>
  }
</div>

@code
{
  private readonly SequentialLifetimes myLifetimes = new(Lifetime.Eternal);

  private IReadOnlyDictionary<Guid, PipelinePartExecutionResults> myPipelinePartsExecutionResults = 
    new Dictionary<Guid, PipelinePartExecutionResults>();
  
  private Lifetime myCurrentLifetime;
  private ProcessCaseData? myProcessCaseData;

  [Parameter] public required ProcessCaseData ProcessCaseData { get; set; }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    if (ReferenceEquals(ProcessCaseData, myProcessCaseData))
    {
      Logger.LogDebug("Cached process data equals a new one, will not do anything");
      return;
    }

    myProcessCaseData = ProcessCaseData;
    myCurrentLifetime = myLifetimes.Next();
    myPipelinePartsExecutionResults = await SubscriptionsService.GetCaseExecutionResult(myProcessCaseData);

    StateHasChanged();
  }
}