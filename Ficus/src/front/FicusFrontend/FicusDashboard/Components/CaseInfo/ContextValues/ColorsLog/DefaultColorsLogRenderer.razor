@using Ficus
@using Radzen.Blazor

<div style="margin: 10px; width: 100%; height: 100%;">
  <div style="display: flex; flex-direction: row; column-gap: 10px;">
    <WidthAndHeightScale @ref="myWidthAndHeightScale"
                         WidthScaleInitialValue="1"
                         HeightScaleInitialValue="1"/>

    <div>
      <div>
        Filter:
      </div>
      <div>
        <input @bind="@myFilterValue" />
      </div>
    </div>
  </div>

  <div style="margin-top: 10px">
    <RadzenButton Text="Rerender" Click="RedrawCanvas"></RadzenButton>
  </div>

  <div style="margin-top: 10px; width: 100%; height: 100%;">
    <ColorsEventLogRenderer @ref="myRenderer"
                            Log="Log"
                            IsFullScreen="IsFullScreen"
                            WidthScale="@(myWidthAndHeightScale?.WidthScale ?? 1)"
                            HeightScale="@(myWidthAndHeightScale?.HeightScale ?? 1)"
                            Filter="@myFilterValue" />
  </div>
</div>

@code {
  private ColorsEventLogRenderer? myRenderer;
  private WidthAndHeightScale? myWidthAndHeightScale;
  private string? myFilterValue;


  [Parameter] public required bool IsFullScreen { get; init; }
  [Parameter] public required GrpcColorsEventLog Log { get; init; }

  private void RedrawCanvas() => myRenderer?.RedrawCanvas();
}
