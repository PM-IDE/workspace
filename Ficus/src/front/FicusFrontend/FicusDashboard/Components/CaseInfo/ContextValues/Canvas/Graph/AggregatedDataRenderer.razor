@using System.Globalization

<div style="background: var(--aggregated-data-background); border-radius: 5px; padding: 10px;">
  <div>
    Aggregated Data
  </div>
  <div style="display: flex; flex-direction: row; flex-wrap: wrap; gap: 5px; margin-top: 10px;">
    @foreach (var info in CreateInfos())
    {
      <AggregatedStatInfo Title=@info.Title
                          Histogram=@info.Histogram
                          Value=@info.ValueStringRepresentation.ToString(CultureInfo.InvariantCulture)
                          Units=@info.Units/>
    }
  </div>
</div>

@code {
  [Parameter] public required AggregatedData Data { get; init; }


  private class AggregatedStatDto
  {
    public required string Title { get; init; }
    public required double Value { get; init; }
    public required string ValueStringRepresentation { get; init; }

    public string? Units { get; init; }
    public (string, double)[]? Histogram { get; init; }
  }

  private AggregatedStatDto[] CreateInfos()
  {
    List<AggregatedStatDto> infos =
    [
      ..CreateCountersDtos(),
      ..CreateHistogramsDtos(),
      ..CreateActivitiesDurationsDtos(),
      ..CreateOtherDtos()
    ];

    return infos.OrderByDescending(i => i.Histogram?.Length ?? -1).ToArray();
  }

  private AggregatedStatDto[] CreateCountersDtos() =>
    Data.GlobalSoftwareData.Counters.Select(counter =>
    {
      var value = counter.Value.Value;

      return new AggregatedStatDto
      {
        Value = value,
        Title = CreateAggregatedStatTitle(counter.Key, counter.Value),
        ValueStringRepresentation = value.ToString(CultureInfo.InvariantCulture),
        Units = counter.Value.Units,
      };
    }).ToArray();

  private static string CreateAggregatedStatTitle<T>(string key, ValueWithUnits<T> value) =>
    string.IsNullOrEmpty(value.Group) ? key : value.Group + " | " + key;

  private AggregatedStatDto[] CreateHistogramsDtos() =>
    Data.GlobalSoftwareData.Histograms.Select(histogram =>
    {
      var value = histogram.Value.Value.Values.Sum();

      return new AggregatedStatDto
      {
        Value = value,
        Title = CreateAggregatedStatTitle(histogram.Key, histogram.Value),
        ValueStringRepresentation = value.ToString(CultureInfo.InvariantCulture),
        Units = histogram.Value.Units,
        Histogram = PrepareHistogram(histogram.Value.Value),
      };
    }).ToArray();

  private AggregatedStatDto[] CreateActivitiesDurationsDtos() =>
    Data.GlobalSoftwareData.ActivitiesDurations.Select(duration =>
    {
      var value = duration.Value.Value.Value;
      return new AggregatedStatDto
      {
        Value = value,
        Title = CreateAggregatedStatTitle(duration.Key, duration.Value),
        ValueStringRepresentation = value.ToString(CultureInfo.InvariantCulture),
        Units = duration.Value.Units
      };
    }).ToArray();

  private AggregatedStatDto[] CreateOtherDtos() =>
  [
    new()
    {
      Title = "Execution Time",
      Value = Data.TotalExecutionTimeNs,
      ValueStringRepresentation = TimeSpan.FromTicks((long)Math.Ceiling(Data.TotalExecutionTimeNs / TimeSpan.NanosecondsPerTick)).ToString("c"),
      Units = string.Empty
    }
  ];

  private static (string, double)[] PrepareHistogram(Dictionary<string, double> map) =>
    map.OrderBy(p => p.Value).Select(p => (p.Key, p.Value)).ToArray();

}