@using System.Globalization
@using Ficus
@using FicusDashboard.Layout.Models
@using Radzen
@using Radzen.Blazor
@using Orientation = Radzen.Orientation
@inject IJSRuntime Js


<div style="display: flex; flex-direction: column; width: 100%; height: 100%; padding: 5px;">
  <div style="display: flex; flex-direction: row; flex-grow: 1;">
    <div style="display: flex; flex-direction: column; 
                background: var(--aggregated-data-background); border-radius: 5px; padding: 5px;">
      @if (IsRichUiGraph(Graph))
      {
        @if (myEnhancements is { })
        {
          @foreach (var (index, enhancement) in myEnhancements.Index())
          {
            <div style="display: flex; flex-direction: row; align-items: center;">
              <RadzenCheckBox TValue="bool"
                              @ref="@myCheckBoxes[index]"
                              ValueChanged="@(v => HandleSelectionChange(v, enhancement))"/>

              <div style="margin-left: 5px;">@enhancement</div>
            </div>
          }
        }

        <div style="margin-top: 5px;">Filter:</div>
        <input type="text" @bind="myFilterValue" style="width: 90%"/>
      }

      <div style="margin-top: 5px;">Spacing factor:</div>
      <input type="text" @bind="mySpacingFactor" style="width: 90%"/>

      <RadzenStack Orientation="Orientation.Horizontal"
                   AlignItems="AlignItems.Center"
                   Gap="0.5rem"
                   Style="margin-top: 5px;">
        <RadzenLabel Text="TB"/>
        <RadzenSwitch Name="Orientation" @bind-Value="@myUseLROrientation"/>
        <RadzenLabel Text="LR"/>
      </RadzenStack>

      <RadzenButton Click="ReRenderCanvas" Style="width: 90%; margin-top: 5px;">Rerender</RadzenButton>
      <RadzenButton Click="ExportGraph" Style="width: 90%; margin-top: 5px;">Export to SVG</RadzenButton>
    </div>

    <CanvasComponent @ref="myCanvasComponent" IsFullScreen="@IsFullScreen" RenderingFunc="RenderCanvas"/>
  </div>

  <div style="margin-top: 5px;">
    @if (myAggregatedData is { } data)
    {
      <AggregatedDataRenderer Data="@data"/>
    }
  </div>
</div>

@code
{
  private static string[] ourPredefinedEnhancements =
  [
    "Allocations", "Exceptions", "MethodsLoadUnload", "MethodsInlinings", "ArrayPools", "Http", "Sockets", "Threads"
  ];


  [Parameter] public required bool IsFullScreen { get; init; }
  [Parameter] public required GrpcGraph Graph { get; init; }
  [Parameter] public required ProcessCaseData ProcessCaseData { get; init; }
  [Parameter] public GrpcAnnotation? Annotation { get; set; }


  private bool myUseLROrientation = true;
  private string? myFilterValue;
  private string mySpacingFactor = "1.4";

  private CanvasComponent? myCanvasComponent;

  private List<string>? myEnhancements;
  private HashSet<string> mySelectedEnhancements = null!;
  private RadzenCheckBox<bool>[] myCheckBoxes = null!;

  private AggregatedData? myAggregatedData;


  protected override void OnParametersSet()
  {
    myEnhancements = FindAllEnhancements(Graph);
    mySelectedEnhancements = myEnhancements.ToHashSet();
    myCheckBoxes = new RadzenCheckBox<bool>[myEnhancements.Count];
  }

  private static List<string> FindAllEnhancements(GrpcGraph graph)
  {
    var enhancements = new List<string>(ourPredefinedEnhancements);

    var customEnhancements = graph.Edges
      .SelectMany(e => e.AdditionalData)
      .SelectMany(d => ExtractCustomEnhancements(d.SoftwareData))
      .ToHashSet();

    AddNodesCustomEnhancements(graph, customEnhancements);

    enhancements.AddRange(customEnhancements.Order());

    return enhancements;
  }

  private static void AddNodesCustomEnhancements(GrpcGraph graph, HashSet<string> enhancements)
  {
    foreach (var node in graph.Nodes)
    {
      foreach (var enhancement in node.AdditionalData.SelectMany(d => ExtractCustomEnhancements(d.SoftwareData)))
      {
        enhancements.Add(enhancement);
      }

      if (node.InnerGraph is { } innerGraph)
      {
        AddNodesCustomEnhancements(innerGraph, enhancements);
      }
    }
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (!firstRender) return;

    SetInitialCheckBoxesValues();
    StateHasChanged();
  }

  private void SetInitialCheckBoxesValues()
  {
    if (!IsRichUiGraph(Graph)) return;

    foreach (var checkBox in myCheckBoxes)
    {
      checkBox.Value = true;
    }
  }

  private static IEnumerable<string> ExtractCustomEnhancements(GrpcSoftwareData data) => data switch
  {
    null => [],
    { } => data.HistogramData.Select(h => h.Name).Concat(data.SimpleCounterData.Select(c => c.Name))
  };

  private static bool IsRichUiGraph(GrpcGraph graph) =>
    graph.Edges.Any(e => e.AdditionalData.Any(d => d.DataCase.IsRichUiAdditionalData())) ||
    graph.Nodes.Any(n => n.AdditionalData.Any(d => d.DataCase.IsRichUiAdditionalData()) ||
                         n.InnerGraph is { } innerGraph && IsRichUiGraph(innerGraph)
    );

  private async Task<IJSObjectReference> RenderCanvas(string canvasId)
  {
    var enhancements = mySelectedEnhancements.Select(e => e.ToString()).OrderDescending().ToList();
    var spacingFactor = double.TryParse(mySpacingFactor, CultureInfo.InvariantCulture, out var factor) switch
    {
      true => factor,
      false => 1
    };

    myAggregatedData = await Js.InvokeAsync<AggregatedData>("createAggregatedData", Graph, Annotation, myFilterValue);
    StateHasChanged();

    return await Js.InvokeAsync<IJSObjectReference>(
      "drawGraph",
      canvasId,
      Graph,
      Annotation,
      myAggregatedData,
      enhancements,
      myFilterValue,
      spacingFactor,
      IsRichUiGraph(Graph),
      myUseLROrientation
    );
  }

  private string CreateExportFileName() =>
    ProcessCaseData.ProcessData.ProcessName + "_" + ProcessCaseData.Case.DisplayName + "_graph";

  private void HandleSelectionChange(bool selected, string enhancement)
  {
    if (selected)
    {
      mySelectedEnhancements.Add(enhancement);
    }
    else
    {
      mySelectedEnhancements.Remove(enhancement);
    }
  }

  private void ReRenderCanvas() => myCanvasComponent?.ReRenderCanvas();

  private Task ExportGraph() =>
    myCanvasComponent is { } ? myCanvasComponent.ExportGraph(CreateExportFileName()) : Task.CompletedTask;
}