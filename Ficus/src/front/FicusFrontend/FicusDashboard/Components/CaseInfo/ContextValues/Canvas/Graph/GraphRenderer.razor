@using System.Globalization
@using Ficus
@using FicusDashboard.Layout.Models
@using Radzen.Blazor
@inject IJSRuntime Js


<div style="display: flex; flex-direction: row; width: 100%; height: 100%;">
  <div style="display: flex; flex-direction: column; margin-top: 5px; margin-left: 5px;">
    @if (IsRichUiGraph())
    {
      @foreach (var (index, kind) in Enum.GetValues<SoftwareGraphEnhancementKind>().Index())
      {
        <div style="display: flex; flex-direction: row; align-items: center;">
          <RadzenCheckBox @ref="@myCheckBoxes[index]"
                          TValue="bool"
                          ValueChanged="@(v => HandleSelectionChange(index, v, kind))"/>

          <div style="margin-left: 5px;">@kind.ToString()</div>
        </div>
      }

      <div style="margin-top: 5px;">Filter:</div>
      <input type="text" @bind="myFilterValue" style="width: 120px;"/> 
    }

    <div style="margin-top: 5px;">Spacing factor:</div>
    <input type="text" @bind="mySpacingFactor" style="width: 120px;"/>

    <RadzenButton Click="ReRenderCanvas" Style="width: 120px; margin-top: 5px;">Rerender</RadzenButton>
  </div>

  <CanvasComponent @ref="myCanvasComponent" IsFullScreen="@IsFullScreen" RenderingFunc="RenderCanvas"
                   FileNameCreator="CreateExportFileName"/>
</div>

@code
{
  private enum SoftwareGraphEnhancementKind
  {
    Allocations,
    Exceptions,
    MethodsLoadUnload,
    MethodsInlinings,
    ArrayPools,
    Http,
    Sockets,
    Threads
  }

  [Parameter] public required bool IsFullScreen { get; init; }
  [Parameter] public required GrpcGraph Graph { get; init; }
  [Parameter] public required ProcessCaseData ProcessCaseData { get; init; }
  [Parameter] public GrpcAnnotation? Annotation { get; set; }


  private string? myFilterValue;
  private string? mySpacingFactor = "1";
  private CanvasComponent? myCanvasComponent;
  private readonly RadzenCheckBox<bool>[] myCheckBoxes = new RadzenCheckBox<bool>[Enum.GetValues<SoftwareGraphEnhancementKind>().Length];
  private readonly HashSet<SoftwareGraphEnhancementKind> mySelectedEnhancements = Enum.GetValues<SoftwareGraphEnhancementKind>().ToHashSet();


  protected override void OnAfterRender(bool firstRender)
  {
    if (!firstRender) return;

    SetInitialCheckBoxesValues();
    StateHasChanged();
  }

  private void SetInitialCheckBoxesValues()
  {
    if (!IsRichUiGraph()) return;

    foreach (var checkBox in myCheckBoxes)
    {
      checkBox.Value = true;
    }
  }

  private bool IsRichUiGraph() =>
    Graph.Edges.Any(e => e.AdditionalData.Any(d => d.DataCase.IsRichUiAdditionalData())) ||
    Graph.Nodes.Any(n => n.AdditionalData.Any(d => d.DataCase.IsRichUiAdditionalData()));

  private async Task<IJSObjectReference> RenderCanvas(string canvasId)
  {
    var enhancements = mySelectedEnhancements.Select(e => e.ToString()).OrderDescending().ToList();
    var spacingFactor = double.TryParse(mySpacingFactor, CultureInfo.InvariantCulture, out var factor) switch
    {
      true => factor,
      false => 1
    };

    return await Js.InvokeAsync<IJSObjectReference>(
      "drawGraph", canvasId, Graph, Annotation, enhancements, myFilterValue, spacingFactor, IsRichUiGraph());
  }

  private string CreateExportFileName()
  {
    return ProcessCaseData.ProcessData.ProcessName + "_" + ProcessCaseData.Case.DisplayName + "_graph";
  }

  private void HandleSelectionChange(int index, bool selected, SoftwareGraphEnhancementKind enhancement)
  {
    if (selected)
    {
      mySelectedEnhancements.Add(enhancement);
    }
    else
    {
      mySelectedEnhancements.Remove(enhancement);
    }
  }

  private void ReRenderCanvas()
  {
    myCanvasComponent?.ReRenderCanvas();
  }
}