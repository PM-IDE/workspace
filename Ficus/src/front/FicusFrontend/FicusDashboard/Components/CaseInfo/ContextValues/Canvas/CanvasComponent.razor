@using BlazorBootstrap;

@inherits ComponentBase

@inject IJSRuntime Js

@if (myIsDrawing)
{
  <Spinner Style="margin-top: 10px; margin-left: 10px;" Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
}

<div style="visibility: @(myIsDrawing ? "collapse" : "visible")" class="@(IsFullScreen ? "canvas-container-fullscreen" : "canvas-container")">
  <div id="@myCytoscapeContainerId" class="@(IsFullScreen ? "canvas-container-fullscreen" : "cytoscape-canvas")"></div>

  <Button Color="ButtonColor.Primary" Active="true" @onclick="ExportGraph">
    Export to SVG
  </Button>
</div>


@code {
  private readonly Guid myCytoscapeContainerId = Guid.NewGuid();

  private bool myRequestedToRerender;
  private bool myIsFullScreen;
  private bool myIsDrawing;
  private IJSObjectReference? myCytoscapeReference;

  [Parameter] public required bool IsFullScreen { get; init; }
  [Parameter] public required Func<string, Task<IJSObjectReference>> RenderingFunc { get; init; }
  [Parameter] public required Func<string> FileNameCreator { get; init; }


  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender || myIsFullScreen != IsFullScreen || myRequestedToRerender)
    {
      myIsFullScreen = IsFullScreen;
      myRequestedToRerender = false;
      ReRenderCanvasInternal();
    }

    return Task.CompletedTask;
  }

  private async Task ExportGraph()
  {
    await Js.InvokeVoidAsync("exportCytoscapeToSvg", myCytoscapeReference, FileNameCreator());
  }

  private void ReRenderCanvasInternal()
  {
    myIsDrawing = true;
    StateHasChanged();

    //some hacks in order to make it work after changing to full screen from JS side
    Task.Delay(100).ContinueWith(async _ =>
    {
      await InvokeAsync(async () =>
      {
        myCytoscapeReference = await RenderingFunc(myCytoscapeContainerId.ToString());
        myIsDrawing = false;
        StateHasChanged();
      });
    });
  }

  public void ReRenderCanvas()
  {
    myRequestedToRerender = true;
    ReRenderCanvasInternal();
  }
}