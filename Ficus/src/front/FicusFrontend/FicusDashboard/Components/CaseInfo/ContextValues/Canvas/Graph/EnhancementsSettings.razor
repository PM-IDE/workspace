@if (myEnhancements is { })
{
  @foreach (var group in myEnhancements.GroupBy(e => e.Group).OrderBy(e => e.Key))
  {
    <div style="margin-bottom: 10px;">
      <div>
        @(string.IsNullOrWhiteSpace(group.Key) ? "Ungrouped" : group.Key)
      </div>

      @foreach (var enhancement in group)
      {
        <div style="display: flex; flex-direction: row; align-items: center;">
          <input type="checkbox"
                 checked="checked"
                 @onchange="@(args => HandleSelectionChange(args.Value is true, enhancement))"/>

          <div style="margin-left: 5px;">@enhancement.DisplayName</div>
        </div>
      }
    </div>
  }
}


@code {

  public record EnhancementName(string Name, string DisplayName, string? Group)
  {
    public EnhancementName(string commonName, string? group = null) : this(commonName, commonName, group)
    {
    }
  }


  [Parameter] public required List<EnhancementName>? Enhancements { get; init; }


  private List<EnhancementsSettings.EnhancementName>? myEnhancements;
  private HashSet<EnhancementsSettings.EnhancementName> mySelectedEnhancements = null!;


  public List<string> SelectedEnhancements => mySelectedEnhancements.Select(e => e.Name).OrderDescending().ToList();


  protected override void OnParametersSet()
  {
    if (ReferenceEquals(Enhancements, myEnhancements)) return;

    myEnhancements = Enhancements;

    if (myEnhancements is not { }) return;

    mySelectedEnhancements = myEnhancements.ToHashSet();
  }

  private void HandleSelectionChange(bool selected, EnhancementsSettings.EnhancementName enhancement)
  {
    if (selected)
    {
      mySelectedEnhancements.Add(enhancement);
    }
    else
    {
      mySelectedEnhancements.Remove(enhancement);
    }
  }

}