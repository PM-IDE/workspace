@typeparam TItem where TItem : FrontModelBase
  @typeparam TInnerItem where TInnerItem : FrontModelBase
  @typeparam TId where TId : notnull
@using FicusDashboard.Utils
@inherits ComponentBase;


<SidebarListContainer ComponentStyle="@ComponentStyle"
                      Title="@Title">
  @foreach (var item in Items)
  {
    <div class="sidebar-list-item">
      <div class="sidebar-list-item-title-container centered-text"
           @onclick="@(_ => HandleItemTitleClicked(item.Item))">
        <div class="sidebar-list-item-title">
          @ItemType @item.Name
        </div>
      </div>

      @if (IsExpanded(item.Item))
      {
        <div>
          @foreach (var (_, innerItem) in item.InnerItems.OrderBy(p => p.Key))
          {
            <div @onclick="@(_ => HandleInnerItemSelected(item, innerItem))">
              <SidebarListItem ListItemInfo="innerItem.ListItemInfo"
                               Icon="@ListItemIcon"
                               ProcessingState="innerItem.InnerItem.UserData.GetOrThrow(ComponentsKeys.ProcessingStateKey)"/>
            </div>
          }
        </div>
      }
    </div>
  }
</SidebarListContainer>

@code
{
  private static readonly Key<bool> ourExpandedKey = new(nameof(ourExpandedKey));


  [Parameter] public string? ListItemIcon { get; set; }
  [Parameter] public required SidebarListContainer.Style ComponentStyle { get; set; }
  [Parameter] public required string Title { get; set; }
  [Parameter] public required string ItemType { get; set; }
  [Parameter] public required List<CollectionItemInfo<TItem, TInnerItem, TId>> Items { get; set; }

  [Parameter] public Action<TItem, TInnerItem>? InnerItemSelected { get; set; }


  private bool IsExpanded(TItem item)
  {
    return item.UserData.GetOrCreate(ourExpandedKey, static () => true);
  }

  private void HandleInnerItemSelected(
    CollectionItemInfo<TItem, TInnerItem, TId> item,
    InnerCollectionItemInfo<TInnerItem, TId> innerItem)
  {
    InnerItemSelected?.Invoke(item.Item, innerItem.InnerItem);
    innerItem.InnerItem.UserData.PutData(ComponentsKeys.ProcessingStateKey, ItemProcessingState.Seen);

    StateHasChanged();
  }
  
  private void HandleItemTitleClicked(TItem item)
  {
    var expanded = item.UserData.GetOrCreate(ourExpandedKey, static () => true);
    item.UserData.PutData(ourExpandedKey, !expanded);

    StateHasChanged();
  }
}