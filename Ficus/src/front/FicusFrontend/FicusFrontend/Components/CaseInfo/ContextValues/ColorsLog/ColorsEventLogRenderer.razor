@using BlazorBootstrap
@using Ficus
@using JetBrains.Threading

@inject ILogger<ColorsEventLogRenderer> Logger
@inject IJSRuntime Js;

@if (!myFinishedCanvasDrawings)
{
  <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
}


@if (mySuggestedAdjustment is var (suggestedWidthScale, suggestedHeightScale))
{
  <div>
    Rendered canvas is too big, suggested scale are ({@suggestedWidthScale}, {@suggestedHeightScale})
  </div>
}

<div class="@CanvasContainerClass">
  <canvas id="@myCanvasId.ToString()"></canvas>
</div>

@code
{
  private readonly Guid myCanvasId = Guid.NewGuid();

  private bool myFinishedCanvasDrawings = false;
  private (double X, double Y)? mySuggestedAdjustment = null;

  private string CanvasContainerClass => "colors-log-canvas-container " + (myFinishedCanvasDrawings && mySuggestedAdjustment is null) switch
  {
    true => string.Empty,
    false => "invisible-canvas"
  };

  [Parameter] public required GrpcColorsEventLog Log { get; init; }
  [Parameter] public double? WidthScale { get; init; }
  [Parameter] public double? HeightScale { get; init; }
  [Parameter] public Action<double, double>? CanvasDimensionsTooLargeHandler { get; init; }


  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return Task.CompletedTask;

    RedrawCanvas();

    return Task.CompletedTask;
  }

  public void RedrawCanvas()
  {
    myFinishedCanvasDrawings = false;
    StateHasChanged();

    Task.Run(async () =>
    {
      var renderResult = await Js.InvokeAsync<List<double>?>(
        "drawColorsLog", Log, WidthScale ?? 1, HeightScale ?? 1, myCanvasId.ToString(), CanvasColors.Instance);

      if (renderResult is [var suggestedWidthScale, var suggestedHeightScale])
      {
        mySuggestedAdjustment = (suggestedWidthScale, suggestedHeightScale);
      }
      else
      {
        mySuggestedAdjustment = null;
      }

      myFinishedCanvasDrawings = true;
      StateHasChanged();

      if (renderResult is [var widthScale, var heightScale])
      {
        CanvasDimensionsTooLargeHandler?.Invoke(widthScale, heightScale);
      }
    }).NoAwait();
  }
}