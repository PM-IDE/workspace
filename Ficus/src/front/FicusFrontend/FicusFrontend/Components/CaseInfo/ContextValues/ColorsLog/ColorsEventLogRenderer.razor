@using BlazorBootstrap
@using Ficus
@using JetBrains.Threading

@inject ILogger<ColorsEventLogRenderer> Logger
@inject IJSRuntime Js;

@if (!myFinishedCanvasDrawings)
{
  <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
}

<div class="@CanvasContainerClass">
  <canvas id="@myCanvasId.ToString()"></canvas>
</div> 


@code
{
  private readonly Guid myCanvasId = Guid.NewGuid();

  private bool myFinishedCanvasDrawings = false;
  private readonly SemaphoreSlim mySemaphoreSlim = new(1);

  private string CanvasContainerClass => "colors-log-canvas-container " + myFinishedCanvasDrawings switch
  {
    true => string.Empty,
    false => "invisible-canvas"
  };

  [Parameter] public double? WidthScale { get; init; }
  [Parameter] public double? HeightScale { get; init; }
  [Parameter] public required GrpcColorsEventLog Log { get; init; }


  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return Task.CompletedTask;

    RedrawCanvas();

    return Task.CompletedTask;
  }

  public void RedrawCanvas()
  {
    try
    {
      mySemaphoreSlim.Wait();
      myFinishedCanvasDrawings = false;
      StateHasChanged();
    }
    catch (Exception ex)
    {
      mySemaphoreSlim.Release();
      return;
    }

    Task.Run(async () =>
    {
      try
      {
        await Js.InvokeVoidAsync("drawColorsLog", Log, WidthScale ?? 1, HeightScale ?? 1, myCanvasId.ToString(), CanvasColors.Instance);

        myFinishedCanvasDrawings = true;
        StateHasChanged();
      }
      finally
      {
        mySemaphoreSlim.Release();
      }
    }).NoAwait();
  }
}