@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using BlazorBootstrap
@using Ficus
@inject IJSRuntime Js
@inject ILogger<ColorsEventLogRenderer> Logger

@if (!myFinishedCanvasDrawings)
{
  <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
}

<div class="@CanvasContainerClass">
  <BECanvas Width="@myCanvasWidth" Height="@myCanvasHeight" @ref="myCanvas"></BECanvas>
</div>

@code {
  private BECanvasComponent myCanvas;
  private bool myFinishedCanvasDrawings = false;

  private int myRectWidth = 5;
  private int myRectHeight = 5;
  private int myCanvasWidth = 300;
  private int myCanvasHeight = 400;


  private string CanvasContainerClass => "colors-log-canvas-container " + myFinishedCanvasDrawings switch
  {
    true => string.Empty,
    false => "invisible-canvas"
  };


  [Parameter] public required GrpcColorsEventLog Log { get; init; }


  protected override void OnParametersSet()
  {
    myCanvasHeight = Log.Traces.Count * myRectHeight;
    myCanvasWidth = Log.Traces.Select(t => t.EventColors.Count).Max() * myRectWidth;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;

    Task.Run(async () =>
    {
      try
      {
        await Task.Delay(500);
        var context = await myCanvas.CreateCanvas2DAsync();

        await context.ClearRectAsync(0, 0, myCanvasWidth, myCanvasHeight);

        var y = 0;

        foreach (var trace in Log.Traces)
        {
          await context.BeginBatchAsync();

          var x = 0;
          foreach (var rect in trace.EventColors)
          {
            var color = Log.Mapping[(int)rect.ColorIndex].Color;
            var rgb = Color.FromArgb((int)color.Red, (int)color.Green, (int)color.Blue).ToHexString();

            await context.SetFillStyleAsync(rgb);
            await context.FillRectAsync(x, y, myRectWidth, myRectHeight);
            x += myRectWidth;
          }

          y += myRectHeight;

          await context.EndBatchAsync();
        }

        myFinishedCanvasDrawings = true;
        StateHasChanged();
      }
      catch (Exception ex)
      {
        Logger.LogError(ex, "Failed to render canvas");
      }
    });
  }
}