@using Ficus
@using FicusFrontend.Components.CaseInfo.ContextValues
@using FicusFrontend.Components.CaseInfo.ContextValues.ColorsLog
@using FicusFrontend.Components.CaseInfo.ContextValues.Graph
@using FicusFrontend.Components.CaseInfo.ContextValues.PetriNet
@using FicusFrontend.Layout.Models
@using FicusFrontend.Services.Cases
@using JetBrains.Lifetimes
@using static Ficus.GrpcContextValue;

@inherits ComponentBase

@inject IProcessesService ProcessService
@inject ILogger<CaseInfo> Logger

@{
  var title = myProcessCaseData switch
  {
      { } => myProcessCaseData.ProcessData.ProcessName + " " + myProcessCaseData.Case.Name,
      _ => "The case was not yet selected."
  };
}

<PageTitle>@title</PageTitle>

<div class="case-info-header centered-text">
  @title
</div>

<div class="pipeline-parts-context-values-outer-container">
  @foreach (var result in myPipelinePartsExecutionResults)
  {
    <div class="pipeline-parts-context-values-inner-container">
      <div class="pipeline-part-name" @onclick="_ => HandleExecutionResultTitleClicked(result.Key)">
        @result.Value.PipelinePartName
      </div>

      @if (IsExpanded(result.Key))
      {
        <div class="pipeline-part-context-values-container">
          @{
            var contextValues = result.Value.ContextValues.Select(c => c.Value).ToList();
          }

          @foreach (var fragment in CreateRenderersFor(result.Value.PipelinePartName, contextValues))
          {
            <div>
              @fragment
            </div>
          }
        </div>
      }
    </div>
  }
</div>

@code
{
  private class ExecutionResultState
  {
    public bool IsExpanded { get; set; } = true;
  }

  private readonly Dictionary<Guid, ExecutionResultState> myStates = [];
  private readonly List<KeyValuePair<Guid, CaseData.PipelinePartExecutionResult>> myPipelinePartsExecutionResults = [];
  private readonly SequentialLifetimes myLifetimes = new(Lifetime.Eternal);

  private ProcessCaseData? myProcessCaseData;

  [Parameter] public ProcessCaseData? ProcessCaseData { get; set; }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (ProcessCaseData is null) return;
    if (ProcessCaseData.Equals(myProcessCaseData)) return;

    var lifetime = myLifetimes.Next();

    myProcessCaseData = ProcessCaseData;

    var values = myProcessCaseData.ProcessData.ProcessCases[myProcessCaseData.Case.Name].ContextValues;
    myPipelinePartsExecutionResults.Clear();
    myPipelinePartsExecutionResults.AddRange(values);

    StateHasChanged();

    values.Change.Advise(lifetime, _ =>
    {
      //todo: rewrite
      myPipelinePartsExecutionResults.Clear();
      myPipelinePartsExecutionResults.AddRange(values);
      StateHasChanged();
    });
  }

  private bool IsExpanded(Guid executionResultId) => GetOrCreateState(executionResultId).IsExpanded;

  private ExecutionResultState GetOrCreateState(Guid executionResultId)
  {
    if (myStates.TryGetValue(executionResultId, out var state)) return state;

    state = new ExecutionResultState();
    myStates[executionResultId] = state;
    return state;
  }


  private void HandleExecutionResultTitleClicked(Guid executionResultId)
  {
    var state = GetOrCreateState(executionResultId);
    state.IsExpanded = !state.IsExpanded;
    StateHasChanged();
  }

  private IEnumerable<RenderFragment> CreateRenderersFor(string pipelinePartName, List<GrpcContextValue> contextValues)
  {
    return contextValues switch
    {
        [var singleValue] => [FindRendererFor(singleValue)],
        _ => FindRenderersFor(pipelinePartName, contextValues)
    };
  }

  private RenderFragment FindRendererFor(GrpcContextValue contextValue)
  {
    return contextValue.ContextValueCase switch
    {
        ContextValueOneofCase.EventLogInfo => @<EventLogInfoRenderer EventLogInfo="contextValue.EventLogInfo"/>,
        ContextValueOneofCase.ColorsLog => @<ColorsEventLogRenderer @key="Guid.NewGuid()"
                                                                    Log="contextValue.ColorsLog"/>,

        ContextValueOneofCase.PetriNet => @<PetriNetRenderer @key="Guid.NewGuid()"
                                                             PetriNet="contextValue.PetriNet"/>,

        ContextValueOneofCase.Graph => @<GraphRenderer @key="Guid.NewGuid()" Graph="contextValue.Graph"
                                                       ProcessCaseData="myProcessCaseData"/>,

        _ => @<RendererNotFoundComponent ContextValueType="@contextValue.ContextValueCase.ToString()"/>
    };
  }

  private IEnumerable<RenderFragment> FindRenderersFor(string pipelinePartName, List<GrpcContextValue> contextValues)
  {
    if (PipelinePartsGroups.GraphAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedGraphRenderer(pipelinePartName, contextValues) is { } graphRenderer)
    {
      return [graphRenderer];
    }

    if (PipelinePartsGroups.PetriNetsAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedPetriNetRenderer(pipelinePartName, contextValues) is { } petriNetRenderer)
    {
      return [petriNetRenderer];
    }

    return [];
  }

  private RenderFragment? CreateAnnotatedGraphRenderer(string pipelinePartName, List<GrpcContextValue> contextValues)
  {
    var graph = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Graph, c => c.Graph);
    var annotation = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Annotation, c => c.Annotation);

    if (graph is null) return null;

    return @<GraphRenderer @key="Guid.NewGuid()" Graph="graph" ProcessCaseData="myProcessCaseData"
                           Annotation="annotation"/>;
  }

  private RenderFragment? CreateAnnotatedPetriNetRenderer(string pipelinePartName, List<GrpcContextValue> contextValues)
  {
    var petriNet = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.PetriNet, c => c.PetriNet);
    var annotation = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Annotation, c => c.Annotation);

    if (petriNet is null) return null;

    return @<PetriNetRenderer @key="Guid.NewGuid()" PetriNet="petriNet" Annotation="annotation"/>;
  }
}