@using Ficus
@using FicusFrontend.Components.CaseInfo.ContextValues
@using FicusFrontend.Components.CaseInfo.ContextValues.ColorsLog
@using FicusFrontend.Layout.Models
@using FicusFrontend.Services.Cases
@using FicusFrontend.Utils
@using JetBrains.Lifetimes
@using static Ficus.GrpcContextValue;
@using FicusFrontend.Components.CaseInfo.ContextValues.EventLogInfo
@using FicusFrontend.Components.CaseInfo.ContextValues.Canvas.PetriNet
@using FicusFrontend.Components.CaseInfo.ContextValues.Canvas.Graph

@inherits ComponentBase

@inject ISubscriptionsService ISubscriptionService
@inject ILogger<CaseInfo> Logger

@{
  var title = myProcessCaseData switch
  {
    { } => myProcessCaseData.ProcessData.ProcessName + " " + myProcessCaseData.Case.Name,
    _ => "The case was not yet selected."
  };
}

<PageTitle>@title</PageTitle>

<div class="case-info-header-container">
  <div class="case-info-header-first-line">
    <div>
      <img src="images/case.svg" alt="List"/>
    </div>
    <div class="case-info-header-first-line-case">
      Case:
    </div>
  </div>
  <div class="case-info-header centered-text">
    @title
  </div>
</div>

<div class="pipeline-parts-context-values-outer-container">
  @foreach (var (result, index) in myPipelinePartsExecutionResults.Zip(Enumerable.Range(0, myPipelinePartsExecutionResults.Count)))
  {
    <div class="pipeline-parts-context-values-inner-container">
      <div class="pipeline-part-name-container" @onclick="_ => HandleExecutionResultTitleClicked(result.Value)">
        <div class="pipeline-part-name-index">
          @(index + 1)
        </div>
        <div class="pipeline-part-name-icon">
          <img src="images/pipeline_part.svg" alt="Pipeline part icon"/>
        </div>
        <div class="pipeline-part-name">
          @result.Value.PipelinePartName  
        </div>
      </div>

      @{
        var expanded = IsExpanded(result.Value);

        string GetClass(string baseClass, string expandedClass) => $"{baseClass} {(expanded ? expandedClass : string.Empty)}";

        var outerContainerClass = GetClass("pipeline-part-context-values-outer-container", "outer-container-checked");
        var innerContainerClass = GetClass("pipeline-part-context-values-inner-container", "inner-container-checked");
      }

      <div class="@outerContainerClass">
        <div class="@innerContainerClass">
          @{
            var contextValues = result.Value.ContextValues;
          }

          <div class="pipeline-part-context-values-margin-container">
            @foreach (var fragment in CreateRenderersFor(result.Value.PipelinePartName, contextValues))
            {
              <div>
                @fragment
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  }
</div>

@code
{
  private static readonly Key<bool> ourExpandedKey = new(nameof(ourExpandedKey));
  
  private readonly Dictionary<Guid, PipelinePartExecutionResult> myPipelinePartsExecutionResults = [];
  private readonly SequentialLifetimes myLifetimes = new(Lifetime.Eternal);

  private ProcessCaseData? myProcessCaseData;

  [Parameter] public required ProcessCaseData ProcessCaseData { get; set; }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (ReferenceEquals(ProcessCaseData, myProcessCaseData)) return;

    myProcessCaseData = ProcessCaseData;

    var values = myProcessCaseData.ProcessData.ProcessCases[myProcessCaseData.Case.Name].ContextValues;
    values.FlowIntoWithCallback(myLifetimes.Next(), myPipelinePartsExecutionResults, StateHasChanged);
  }

  private bool IsExpanded(PipelinePartExecutionResult result) => result.UserData.GetOrCreate(ourExpandedKey, static () => true);

  private void HandleExecutionResultTitleClicked(PipelinePartExecutionResult result)
  {
    result.UserData.PutData(ourExpandedKey, !result.UserData.GetOrCreate(ourExpandedKey, static () => true));
    StateHasChanged();
  }

  private IEnumerable<RenderFragment> CreateRenderersFor(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    return contextValues switch
    {
      [var singleValue] => [FindRendererFor(singleValue)],
      _ => FindRenderersFor(pipelinePartName, contextValues)
    };
  }

  private RenderFragment FindRendererFor(ContextValueWrapper wrapper)
  {
    var contextValue = wrapper.Value.Value;

    return contextValue.ContextValueCase switch
    {
      ContextValueOneofCase.EventLogInfo => @<EventLogInfoRenderer EventLogInfo="contextValue.EventLogInfo"/>,
      ContextValueOneofCase.ColorsLog => @<ColorsEventLogRenderer @key="wrapper.Id"
                                                                  Log="contextValue.ColorsLog"/>,

      ContextValueOneofCase.PetriNet => @<PetriNetRenderer @key="wrapper.Id"
                                                           PetriNet="contextValue.PetriNet"/>,

      ContextValueOneofCase.Graph => @<GraphRenderer @key="wrapper.Id" Graph="contextValue.Graph"
                                                     ProcessCaseData="myProcessCaseData"/>,

      _ => @<RendererNotFoundComponent ContextValueType="@contextValue.ContextValueCase.ToString()"/>
    };
  }

  private IEnumerable<RenderFragment> FindRenderersFor(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    if (PipelinePartsGroups.GraphAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedGraphRenderer(pipelinePartName, contextValues) is { } graphRenderer)
    {
      return [graphRenderer];
    }

    if (PipelinePartsGroups.PetriNetsAnnotationParts.Contains(pipelinePartName) &&
        CreateAnnotatedPetriNetRenderer(pipelinePartName, contextValues) is { } petriNetRenderer)
    {
      return [petriNetRenderer];
    }

    return [];
  }

  private RenderFragment? CreateAnnotatedGraphRenderer(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    var graphPair = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Graph, c => c.Graph);
    var annotationPair = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Annotation, c => c.Annotation);

    if (graphPair is not var (graphId, graph)) return null;

    var componentId = CreateEntityAnnotationId(graphId, annotationPair);

    return @<GraphRenderer @key="componentId" Graph="graph" ProcessCaseData="myProcessCaseData"
                           Annotation="annotationPair?.Item2"/>;
  }

  private string CreateEntityAnnotationId(Guid id, (Guid, GrpcAnnotation)? annotationPair) => annotationPair switch
  {
    var (annotationId, _) => id.ToString() + annotationId,
    null => id.ToString()
  };

  private RenderFragment? CreateAnnotatedPetriNetRenderer(string pipelinePartName, List<ContextValueWrapper> contextValues)
  {
    var petriNetPair = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.PetriNet, c => c.PetriNet);
    var annotationPair = Logger.TryGetContextValue(pipelinePartName, contextValues, ContextValueOneofCase.Annotation, c => c.Annotation);

    if (petriNetPair is not var (petriNetId, petriNet)) return null;

    var componentId = CreateEntityAnnotationId(petriNetId, annotationPair);

    return @<PetriNetRenderer @key="componentId" PetriNet="petriNet" Annotation="annotationPair?.Item2"/>;
  }
}