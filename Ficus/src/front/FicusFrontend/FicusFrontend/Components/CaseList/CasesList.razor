@using FicusFrontend.Services.Cases
@inherits ComponentBase;
@inject IProcessesService ProcessService;

<SidebarList TCollectionItem="ProcessData"
             TCollectionInnerItem="CaseData"
             TId="string"
             ItemType="Process"
             Items="myProcesses"
             InnerItemSelected="HandleInnerItemSelection" />

@code
{
  private List<CollectionItemInfo<ProcessData, CaseData, string>> myProcesses = [];
  private Case? mySelectedCase;


  [Parameter] public Action<ProcessData, Case>? CaseSelected { get; set; }


  private void HandleInnerItemSelection(ProcessData process, CaseData @case)
  {
    mySelectedCase = @case.Case;
    CaseSelected?.Invoke(process, @case.Case);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    Task.Factory.StartNew(async () =>
    {
      await foreach (var processUpdate in ProcessService.OpenCasesUpdatesStream(CancellationToken.None))
      {
        switch (processUpdate)
        {
          case ProcessContextValuesUpdate cvUpdate:
          {
            var updatedProcess = myProcesses.FirstOrDefault(p => p.Item.ProcessName == cvUpdate.ProcessName);
            var updatedCase = updatedProcess?.InnerItems.FirstOrDefault(c => c.InnerItem.Case.Name == cvUpdate.CaseName);
            if (updatedCase is { } && !updatedCase.InnerItem.Case.Equals(mySelectedCase))
            {
              updatedCase.ListItemInfo.ProcessingState = ItemProcessingState.Updated;
            }

            break;
          }
          case ProcessesListUpdate processesListUpdate:
          {
            myProcesses = processesListUpdate.Processes
                .Select(p => new CollectionItemInfo<ProcessData, CaseData, string>
                {
                    Id = p.ProcessName,
                    Name = p.ProcessName,
                    Item = p,
                    InnerItems = p.ProcessCases.Values
                        .Select(c => new InnerCollectionItemInfo<CaseData, string>
                        {
                            Id = c.Case.Name,
                            InnerItem = c,
                            ListItemInfo = new ListItemInfo
                            {
                                Name = c.Case.Name,
                                UpdatedAt = c.Case.CreatedAt,
                                ProcessingState = ItemProcessingState.New
                            }
                        }).ToList()
                }).ToList();

            break;
          }
          default:
            throw new ArgumentOutOfRangeException(nameof(processUpdate));
        }

        StateHasChanged();
      }
    }, TaskCreationOptions.LongRunning);
  }
}