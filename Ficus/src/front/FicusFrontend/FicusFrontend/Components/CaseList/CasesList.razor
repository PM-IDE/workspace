@using FicusFrontend.Components.SidebarList
@using FicusFrontend.Services.Cases
@inherits ComponentBase;
@inject IProcessesService ProcessService;

<SidebarList TCollectionItem="ProcessData"
             TCollectionInnerItem="Case"
             TId="string"
             ItemType="Process"
             Items="myProcesses"
             InnerItemSelected="HandleCaseSelection" />

@code
{
  private List<CollectionItemInfo<ProcessData, Case, string>> myProcesses = [];
  private Case? mySelectedCase;


  [Parameter] public Action<ProcessData, Case>? CaseSelected { get; set; }
  [Parameter] public Pipeline? SelectedPipeline { get; set; }


  private void HandleCaseSelection(ProcessData process, Case @case)
  {
    mySelectedCase = @case;
    CaseSelected?.Invoke(process, @case);
  }

  protected override void OnParametersSet()
  {
      base.OnParametersSet();

      if (SelectedPipeline is null) return;

      myProcesses = SelectedPipeline.Processes.Values
          .Select(p => new CollectionItemInfo<ProcessData, Case, string>
          {
              Id = p.ProcessName,
              Name = p.ProcessName,
              Item = p,
              InnerItems = p.ProcessCases.Values
                  .Select(c => new InnerCollectionItemInfo<Case, string>
                  {
                      Id = c.Name,
                      InnerItem = c,
                      ListItemInfo = new ListItemInfo
                      {
                          Name = c.Name,
                          UpdatedAt = c.CreatedAt,
                          ProcessingState = ItemProcessingState.New
                      }
                  }).ToList()
          }).ToList();

      StateHasChanged();
  }
}