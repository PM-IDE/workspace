@using Ficus
@using FicusFrontend.Services.Cases
@using ObservableCollections
@inherits ComponentBase

@inject IProcessesService ProcessService


@if (Case is null)
{
    <PageTitle>Select the case</PageTitle>

    <div>
        The case was not yet selected.
    </div>
    return;
}

<PageTitle>@Case.Name</PageTitle>

<div>
    @foreach (var contextValue in myContextValues)
    {
        <div>@contextValue.Value.PipelinePartName</div>
    }
</div>

@code
{
    private readonly List<KeyValuePair<Guid, CaseData.PipelinePartExecutionResult>> myContextValues = [];

    [Parameter] public ProcessData? ProcessData { get; set; }
    [Parameter] public Case? Case { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Case is null || ProcessData is null) return;

        var values = ProcessService.CreateCaseValuesObservable(ProcessData, Case);
        myContextValues.Clear();
        myContextValues.AddRange(values);
        
        StateHasChanged();

        values.CollectionChanged += (in NotifyCollectionChangedEventArgs<KeyValuePair<Guid, CaseData.PipelinePartExecutionResult>> args) =>
        {
            myContextValues.Clear();
            myContextValues.AddRange(values);
            StateHasChanged();
        };
    }
}