@using System.Text.Json
@using FicusFrontend.Services.Cases
@using ObservableCollections
@using BlazorBootstrap
@inherits ComponentBase

@inject IProcessesService ProcessService


@{
    var title = (Case, ProcessData) switch
    {
        ({ }, { }) => ProcessData.ProcessName + " " + Case.Name,
        _ => "The case was not yet selected."
    };
}

<PageTitle>@title</PageTitle>

<div class="case-info-header">
    @title
</div>

<div class="pipeline-parts-context-values-accordion">
    <Accordion AlwaysOpen="true" Flush="false">
        @foreach (var contextValue in myContextValues)
        {
            <AccordionItem Title="@contextValue.Value.PipelinePartName">
                <Content>
                    <div>
                        @JsonSerializer.Serialize(contextValue.Value.ContextValues)
                    </div>
                </Content>
            </AccordionItem>
        }
    </Accordion>
</div>

@code
{
    private readonly List<KeyValuePair<Guid, CaseData.PipelinePartExecutionResult>> myContextValues = [];

    [Parameter] public ProcessData? ProcessData { get; set; }
    [Parameter] public Case? Case { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Case is null || ProcessData is null) return;

        var values = ProcessService.CreateCaseValuesObservable(ProcessData, Case);
        myContextValues.Clear();
        myContextValues.AddRange(values);
        
        StateHasChanged();

        values.CollectionChanged += (in NotifyCollectionChangedEventArgs<KeyValuePair<Guid, CaseData.PipelinePartExecutionResult>> args) =>
        {
            myContextValues.Clear();
            myContextValues.AddRange(values);
            StateHasChanged();
        };
    }
}