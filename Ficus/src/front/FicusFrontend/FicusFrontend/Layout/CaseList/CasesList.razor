@using System.Collections.Concurrent
@using FicusFrontend.Layout.CaseList.Models
@using FicusFrontend.Services
@inherits ComponentBase;
@inject ICasesService CaseService;

<div class="cases-list-title-container">
    <div class="cases-list-title">
        Cases List
    </div>
</div>

@foreach (var @case in myCases)
{
    <div @onclick="@(_ => HandleCaseSelected(@case))">
        <CaseListItem Case="@(@case)"/>
    </div>
}

@code
{
    private readonly ConcurrentBag<CaseListItemDto> myCases = [];

    [Parameter] public Action<Case>? CaseSelected { get; set; }


    private void HandleCaseSelected(CaseListItemDto selectedCase)
    {
        selectedCase.State = CaseListItemState.Seen;
        CaseSelected?.Invoke(selectedCase.Case);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Task.Run(async () =>
        {
            await foreach (var update in CaseService.OpenCasesUpdatesStream(CancellationToken.None))
            {
                switch (update)
                {
                    case CasesListUpdate casesListUpdate:
                    {
                        myCases.Add(new CaseListItemDto
                        {
                            Case = casesListUpdate.Case
                        });

                        break;
                    }
                    case CaseContextValuesUpdate caseContextValuesUpdate:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(update));
                }

                StateHasChanged();
            }
        });
    }
}