@using FicusFrontend.Layout.CaseList.Models
@using FicusFrontend.Services.Cases
@using BlazorBootstrap
@inherits ComponentBase;
@inject IProcessesService ProcessService;

<div class="cases-list-outer-container">
    <div class="cases-list-title-container">
        <div class="cases-list-title">
            Processes
        </div>
    </div>

    <div>
        <Accordion>
            @foreach (var process in myProcesses)
            {
                <AccordionItem Title="@process.ProcessData.ProcessName">
                    <Content>
                        @foreach (var @case in process.Cases)
                        {
                            <div @onclick="@(_ => HandleCaseSelected(process.ProcessData, @case))">
                                <CaseListItem Case="@(@case)"/>
                            </div>
                        }
                    </Content>
                </AccordionItem>
            }
        </Accordion>
    </div>
</div>

@code
{
    private List<ProcessListItemDto> myProcesses = [];

    [Parameter] public Action<ProcessData, Case>? CaseSelected { get; set; }


    private void HandleCaseSelected(ProcessData processData, CaseListItemDto selectedCase)
    {
        selectedCase.State = CaseListItemState.Seen;
        CaseSelected?.Invoke(processData, selectedCase.Case);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Task.Factory.StartNew(async () =>
        {
            await foreach (var processUpdate in ProcessService.OpenCasesUpdatesStream(CancellationToken.None))
            {
                switch (processUpdate)
                {
                    case ProcessContextValuesUpdate processContextValuesUpdate:
                        break;
                    case ProcessesListUpdate processesListUpdate:
                    {
                        myProcesses = processesListUpdate.Processes.
                            Select(p => new ProcessListItemDto
                            {
                                ProcessData = p,
                                Cases = p.ProcessCases.Select(c => CreateCaseListItemDtoFrom(c.Value.Case)).ToList()
                            })
                            .ToList();
                        
                        break;
                    }
                    default:
                        throw new ArgumentOutOfRangeException(nameof(processUpdate));
                }
                StateHasChanged();
            }
        }, TaskCreationOptions.LongRunning);
    }

    private CaseListItemDto CreateCaseListItemDtoFrom(Case @case) => new()
    {
        Case = @case
    };
}