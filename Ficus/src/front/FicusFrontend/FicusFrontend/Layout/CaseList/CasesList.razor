@using System.Collections.Concurrent
@using System.Collections.Specialized
@using FicusFrontend.Layout.CaseList.Models
@using FicusFrontend.Services.Cases
@using ObservableCollections
@inherits ComponentBase;
@inject ICasesService CaseService;

<div class="cases-list-title-container">
    <div class="cases-list-title">
        Cases List
    </div>
</div>

@foreach (var @case in myCases)
{
    <div @onclick="@(_ => HandleCaseSelected(@case))">
        <CaseListItem Case="@(@case)"/>
    </div>
}

@code
{
    private readonly ConcurrentBag<CaseListItemDto> myCases = [];

    [Parameter] public Action<Case>? CaseSelected { get; set; }


    private void HandleCaseSelected(CaseListItemDto selectedCase)
    {
        selectedCase.State = CaseListItemState.Seen;
        CaseSelected?.Invoke(selectedCase.Case);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CaseService.Cases.CollectionChanged += (in NotifyCollectionChangedEventArgs<Case> args) =>
        {
            switch (args.Action)
            {
                case NotifyCollectionChangedAction.Add:
                {
                    if (args.IsSingleItem)
                    {
                        myCases.Add(CreateCaseListItemDtoFrom(args.NewItem));
                    }
                    else
                    {
                        foreach (var newCase in args.NewItems)
                        {
                            myCases.Add(CreateCaseListItemDtoFrom(newCase));
                        }   
                    }

                    break;
                }
                default:
                    throw new ArgumentOutOfRangeException();
            }

            StateHasChanged();
        };
    }

    private CaseListItemDto CreateCaseListItemDtoFrom(Case @case) => new()
    {
        Case = @case
    };
}