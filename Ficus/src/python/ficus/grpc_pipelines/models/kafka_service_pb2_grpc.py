# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!

"""Client and server classes corresponding to protobuf-defined services."""

import grpc



import ficus.grpc_pipelines.models.backend_service_pb2 as backend__service__pb2

import ficus.grpc_pipelines.models.kafka_service_pb2 as kafka__service__pb2





class GrpcKafkaServiceStub(object):

    """Missing associated documentation comment in .proto file."""



    def __init__(self, channel):

        """Constructor.



        Args:

            channel: A grpc.Channel.

        """

        self.SubscribeForKafkaTopicExternal = channel.unary_unary(

                '/ficus.GrpcKafkaService/SubscribeForKafkaTopicExternal',

                request_serializer=kafka__service__pb2.GrpcSubscribeToKafkaAndProduceToKafka.SerializeToString,

                response_deserializer=kafka__service__pb2.GrpcKafkaResult.FromString,

                )

        self.SubscribeForKafkaTopicStream = channel.unary_stream(

                '/ficus.GrpcKafkaService/SubscribeForKafkaTopicStream',

                request_serializer=kafka__service__pb2.GrpcSubscribeForKafkaTopicRequest.SerializeToString,

                response_deserializer=backend__service__pb2.GrpcPipelinePartExecutionResult.FromString,

                )

        self.UnsubscribeFromKafkaTopic = channel.unary_unary(

                '/ficus.GrpcKafkaService/UnsubscribeFromKafkaTopic',

                request_serializer=kafka__service__pb2.GrpcUnsubscribeFromKafkaRequest.SerializeToString,

                response_deserializer=kafka__service__pb2.GrpcKafkaResult.FromString,

                )





class GrpcKafkaServiceServicer(object):

    """Missing associated documentation comment in .proto file."""



    def SubscribeForKafkaTopicExternal(self, request, context):

        """Missing associated documentation comment in .proto file."""

        context.set_code(grpc.StatusCode.UNIMPLEMENTED)

        context.set_details('Method not implemented!')

        raise NotImplementedError('Method not implemented!')



    def SubscribeForKafkaTopicStream(self, request, context):

        """Missing associated documentation comment in .proto file."""

        context.set_code(grpc.StatusCode.UNIMPLEMENTED)

        context.set_details('Method not implemented!')

        raise NotImplementedError('Method not implemented!')



    def UnsubscribeFromKafkaTopic(self, request, context):

        """Missing associated documentation comment in .proto file."""

        context.set_code(grpc.StatusCode.UNIMPLEMENTED)

        context.set_details('Method not implemented!')

        raise NotImplementedError('Method not implemented!')





def add_GrpcKafkaServiceServicer_to_server(servicer, server):

    rpc_method_handlers = {

            'SubscribeForKafkaTopicExternal': grpc.unary_unary_rpc_method_handler(

                    servicer.SubscribeForKafkaTopicExternal,

                    request_deserializer=kafka__service__pb2.GrpcSubscribeToKafkaAndProduceToKafka.FromString,

                    response_serializer=kafka__service__pb2.GrpcKafkaResult.SerializeToString,

            ),

            'SubscribeForKafkaTopicStream': grpc.unary_stream_rpc_method_handler(

                    servicer.SubscribeForKafkaTopicStream,

                    request_deserializer=kafka__service__pb2.GrpcSubscribeForKafkaTopicRequest.FromString,

                    response_serializer=backend__service__pb2.GrpcPipelinePartExecutionResult.SerializeToString,

            ),

            'UnsubscribeFromKafkaTopic': grpc.unary_unary_rpc_method_handler(

                    servicer.UnsubscribeFromKafkaTopic,

                    request_deserializer=kafka__service__pb2.GrpcUnsubscribeFromKafkaRequest.FromString,

                    response_serializer=kafka__service__pb2.GrpcKafkaResult.SerializeToString,

            ),

    }

    generic_handler = grpc.method_handlers_generic_handler(

            'ficus.GrpcKafkaService', rpc_method_handlers)

    server.add_generic_rpc_handlers((generic_handler,))





 # This class is part of an EXPERIMENTAL API.

class GrpcKafkaService(object):

    """Missing associated documentation comment in .proto file."""



    @staticmethod

    def SubscribeForKafkaTopicExternal(request,

            target,

            options=(),

            channel_credentials=None,

            call_credentials=None,

            insecure=False,

            compression=None,

            wait_for_ready=None,

            timeout=None,

            metadata=None):

        return grpc.experimental.unary_unary(request, target, '/ficus.GrpcKafkaService/SubscribeForKafkaTopicExternal',

            kafka__service__pb2.GrpcSubscribeToKafkaAndProduceToKafka.SerializeToString,

            kafka__service__pb2.GrpcKafkaResult.FromString,

            options, channel_credentials,

            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)



    @staticmethod

    def SubscribeForKafkaTopicStream(request,

            target,

            options=(),

            channel_credentials=None,

            call_credentials=None,

            insecure=False,

            compression=None,

            wait_for_ready=None,

            timeout=None,

            metadata=None):

        return grpc.experimental.unary_stream(request, target, '/ficus.GrpcKafkaService/SubscribeForKafkaTopicStream',

            kafka__service__pb2.GrpcSubscribeForKafkaTopicRequest.SerializeToString,

            backend__service__pb2.GrpcPipelinePartExecutionResult.FromString,

            options, channel_credentials,

            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)



    @staticmethod

    def UnsubscribeFromKafkaTopic(request,

            target,

            options=(),

            channel_credentials=None,

            call_credentials=None,

            insecure=False,

            compression=None,

            wait_for_ready=None,

            timeout=None,

            metadata=None):

        return grpc.experimental.unary_unary(request, target, '/ficus.GrpcKafkaService/UnsubscribeFromKafkaTopic',

            kafka__service__pb2.GrpcUnsubscribeFromKafkaRequest.SerializeToString,

            kafka__service__pb2.GrpcKafkaResult.FromString,

            options, channel_credentials,

            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
