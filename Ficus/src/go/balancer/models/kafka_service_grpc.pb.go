// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: kafka_service.proto

package grpc_models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcKafkaService_SubscribeForKafkaTopic_FullMethodName           = "/ficus.GrpcKafkaService/SubscribeForKafkaTopic"
	GrpcKafkaService_UnsubscribeFromKafkaTopic_FullMethodName        = "/ficus.GrpcKafkaService/UnsubscribeFromKafkaTopic"
	GrpcKafkaService_AddPipelineToSubscription_FullMethodName        = "/ficus.GrpcKafkaService/AddPipelineToSubscription"
	GrpcKafkaService_AddPipelineToSubscriptionStream_FullMethodName  = "/ficus.GrpcKafkaService/AddPipelineToSubscriptionStream"
	GrpcKafkaService_RemovePipelineSubscription_FullMethodName       = "/ficus.GrpcKafkaService/RemovePipelineSubscription"
	GrpcKafkaService_RemoveAllPipelineSubscriptions_FullMethodName   = "/ficus.GrpcKafkaService/RemoveAllPipelineSubscriptions"
	GrpcKafkaService_GetAllSubscriptionsAndPipelines_FullMethodName  = "/ficus.GrpcKafkaService/GetAllSubscriptionsAndPipelines"
	GrpcKafkaService_ExecutePipelineAndProduceToKafka_FullMethodName = "/ficus.GrpcKafkaService/ExecutePipelineAndProduceToKafka"
)

// GrpcKafkaServiceClient is the client API for GrpcKafkaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcKafkaServiceClient interface {
	SubscribeForKafkaTopic(ctx context.Context, in *GrpcSubscribeToKafkaRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error)
	UnsubscribeFromKafkaTopic(ctx context.Context, in *GrpcUnsubscribeFromKafkaRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error)
	AddPipelineToSubscription(ctx context.Context, in *GrpcAddPipelineRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error)
	AddPipelineToSubscriptionStream(ctx context.Context, in *GrpcAddPipelineStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error)
	RemovePipelineSubscription(ctx context.Context, in *GrpcRemovePipelineRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error)
	RemoveAllPipelineSubscriptions(ctx context.Context, in *GrpcRemoveAllPipelinesRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error)
	GetAllSubscriptionsAndPipelines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcGetAllSubscriptionsAndPipelinesResponse, error)
	ExecutePipelineAndProduceToKafka(ctx context.Context, in *GrpcExecutePipelineAndProduceKafkaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error)
}

type grpcKafkaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcKafkaServiceClient(cc grpc.ClientConnInterface) GrpcKafkaServiceClient {
	return &grpcKafkaServiceClient{cc}
}

func (c *grpcKafkaServiceClient) SubscribeForKafkaTopic(ctx context.Context, in *GrpcSubscribeToKafkaRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcKafkaResult)
	err := c.cc.Invoke(ctx, GrpcKafkaService_SubscribeForKafkaTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) UnsubscribeFromKafkaTopic(ctx context.Context, in *GrpcUnsubscribeFromKafkaRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcKafkaResult)
	err := c.cc.Invoke(ctx, GrpcKafkaService_UnsubscribeFromKafkaTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) AddPipelineToSubscription(ctx context.Context, in *GrpcAddPipelineRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcKafkaResult)
	err := c.cc.Invoke(ctx, GrpcKafkaService_AddPipelineToSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) AddPipelineToSubscriptionStream(ctx context.Context, in *GrpcAddPipelineStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcKafkaService_ServiceDesc.Streams[0], GrpcKafkaService_AddPipelineToSubscriptionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GrpcAddPipelineStreamRequest, GrpcPipelinePartExecutionResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcKafkaService_AddPipelineToSubscriptionStreamClient = grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult]

func (c *grpcKafkaServiceClient) RemovePipelineSubscription(ctx context.Context, in *GrpcRemovePipelineRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcKafkaResult)
	err := c.cc.Invoke(ctx, GrpcKafkaService_RemovePipelineSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) RemoveAllPipelineSubscriptions(ctx context.Context, in *GrpcRemoveAllPipelinesRequest, opts ...grpc.CallOption) (*GrpcKafkaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcKafkaResult)
	err := c.cc.Invoke(ctx, GrpcKafkaService_RemoveAllPipelineSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) GetAllSubscriptionsAndPipelines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcGetAllSubscriptionsAndPipelinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcGetAllSubscriptionsAndPipelinesResponse)
	err := c.cc.Invoke(ctx, GrpcKafkaService_GetAllSubscriptionsAndPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcKafkaServiceClient) ExecutePipelineAndProduceToKafka(ctx context.Context, in *GrpcExecutePipelineAndProduceKafkaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcKafkaService_ServiceDesc.Streams[1], GrpcKafkaService_ExecutePipelineAndProduceToKafka_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GrpcExecutePipelineAndProduceKafkaRequest, GrpcPipelinePartExecutionResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcKafkaService_ExecutePipelineAndProduceToKafkaClient = grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult]

// GrpcKafkaServiceServer is the server API for GrpcKafkaService service.
// All implementations must embed UnimplementedGrpcKafkaServiceServer
// for forward compatibility.
type GrpcKafkaServiceServer interface {
	SubscribeForKafkaTopic(context.Context, *GrpcSubscribeToKafkaRequest) (*GrpcKafkaResult, error)
	UnsubscribeFromKafkaTopic(context.Context, *GrpcUnsubscribeFromKafkaRequest) (*GrpcKafkaResult, error)
	AddPipelineToSubscription(context.Context, *GrpcAddPipelineRequest) (*GrpcKafkaResult, error)
	AddPipelineToSubscriptionStream(*GrpcAddPipelineStreamRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error
	RemovePipelineSubscription(context.Context, *GrpcRemovePipelineRequest) (*GrpcKafkaResult, error)
	RemoveAllPipelineSubscriptions(context.Context, *GrpcRemoveAllPipelinesRequest) (*GrpcKafkaResult, error)
	GetAllSubscriptionsAndPipelines(context.Context, *emptypb.Empty) (*GrpcGetAllSubscriptionsAndPipelinesResponse, error)
	ExecutePipelineAndProduceToKafka(*GrpcExecutePipelineAndProduceKafkaRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error
	mustEmbedUnimplementedGrpcKafkaServiceServer()
}

// UnimplementedGrpcKafkaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcKafkaServiceServer struct{}

func (UnimplementedGrpcKafkaServiceServer) SubscribeForKafkaTopic(context.Context, *GrpcSubscribeToKafkaRequest) (*GrpcKafkaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeForKafkaTopic not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) UnsubscribeFromKafkaTopic(context.Context, *GrpcUnsubscribeFromKafkaRequest) (*GrpcKafkaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromKafkaTopic not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) AddPipelineToSubscription(context.Context, *GrpcAddPipelineRequest) (*GrpcKafkaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPipelineToSubscription not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) AddPipelineToSubscriptionStream(*GrpcAddPipelineStreamRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error {
	return status.Errorf(codes.Unimplemented, "method AddPipelineToSubscriptionStream not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) RemovePipelineSubscription(context.Context, *GrpcRemovePipelineRequest) (*GrpcKafkaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePipelineSubscription not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) RemoveAllPipelineSubscriptions(context.Context, *GrpcRemoveAllPipelinesRequest) (*GrpcKafkaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllPipelineSubscriptions not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) GetAllSubscriptionsAndPipelines(context.Context, *emptypb.Empty) (*GrpcGetAllSubscriptionsAndPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubscriptionsAndPipelines not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) ExecutePipelineAndProduceToKafka(*GrpcExecutePipelineAndProduceKafkaRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePipelineAndProduceToKafka not implemented")
}
func (UnimplementedGrpcKafkaServiceServer) mustEmbedUnimplementedGrpcKafkaServiceServer() {}
func (UnimplementedGrpcKafkaServiceServer) testEmbeddedByValue()                          {}

// UnsafeGrpcKafkaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcKafkaServiceServer will
// result in compilation errors.
type UnsafeGrpcKafkaServiceServer interface {
	mustEmbedUnimplementedGrpcKafkaServiceServer()
}

func RegisterGrpcKafkaServiceServer(s grpc.ServiceRegistrar, srv GrpcKafkaServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcKafkaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcKafkaService_ServiceDesc, srv)
}

func _GrpcKafkaService_SubscribeForKafkaTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcSubscribeToKafkaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).SubscribeForKafkaTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_SubscribeForKafkaTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).SubscribeForKafkaTopic(ctx, req.(*GrpcSubscribeToKafkaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_UnsubscribeFromKafkaTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUnsubscribeFromKafkaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).UnsubscribeFromKafkaTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_UnsubscribeFromKafkaTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).UnsubscribeFromKafkaTopic(ctx, req.(*GrpcUnsubscribeFromKafkaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_AddPipelineToSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcAddPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).AddPipelineToSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_AddPipelineToSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).AddPipelineToSubscription(ctx, req.(*GrpcAddPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_AddPipelineToSubscriptionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcAddPipelineStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcKafkaServiceServer).AddPipelineToSubscriptionStream(m, &grpc.GenericServerStream[GrpcAddPipelineStreamRequest, GrpcPipelinePartExecutionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcKafkaService_AddPipelineToSubscriptionStreamServer = grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]

func _GrpcKafkaService_RemovePipelineSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRemovePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).RemovePipelineSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_RemovePipelineSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).RemovePipelineSubscription(ctx, req.(*GrpcRemovePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_RemoveAllPipelineSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRemoveAllPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).RemoveAllPipelineSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_RemoveAllPipelineSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).RemoveAllPipelineSubscriptions(ctx, req.(*GrpcRemoveAllPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_GetAllSubscriptionsAndPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcKafkaServiceServer).GetAllSubscriptionsAndPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcKafkaService_GetAllSubscriptionsAndPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcKafkaServiceServer).GetAllSubscriptionsAndPipelines(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcKafkaService_ExecutePipelineAndProduceToKafka_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcExecutePipelineAndProduceKafkaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcKafkaServiceServer).ExecutePipelineAndProduceToKafka(m, &grpc.GenericServerStream[GrpcExecutePipelineAndProduceKafkaRequest, GrpcPipelinePartExecutionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcKafkaService_ExecutePipelineAndProduceToKafkaServer = grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]

// GrpcKafkaService_ServiceDesc is the grpc.ServiceDesc for GrpcKafkaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcKafkaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ficus.GrpcKafkaService",
	HandlerType: (*GrpcKafkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeForKafkaTopic",
			Handler:    _GrpcKafkaService_SubscribeForKafkaTopic_Handler,
		},
		{
			MethodName: "UnsubscribeFromKafkaTopic",
			Handler:    _GrpcKafkaService_UnsubscribeFromKafkaTopic_Handler,
		},
		{
			MethodName: "AddPipelineToSubscription",
			Handler:    _GrpcKafkaService_AddPipelineToSubscription_Handler,
		},
		{
			MethodName: "RemovePipelineSubscription",
			Handler:    _GrpcKafkaService_RemovePipelineSubscription_Handler,
		},
		{
			MethodName: "RemoveAllPipelineSubscriptions",
			Handler:    _GrpcKafkaService_RemoveAllPipelineSubscriptions_Handler,
		},
		{
			MethodName: "GetAllSubscriptionsAndPipelines",
			Handler:    _GrpcKafkaService_GetAllSubscriptionsAndPipelines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddPipelineToSubscriptionStream",
			Handler:       _GrpcKafkaService_AddPipelineToSubscriptionStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecutePipelineAndProduceToKafka",
			Handler:       _GrpcKafkaService_ExecutePipelineAndProduceToKafka_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kafka_service.proto",
}
