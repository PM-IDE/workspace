// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.3
// source: kafka_service.proto

package grpcmodels

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrpcExecutePipelineAndProduceKafkaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineRequest  *GrpcProxyPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	ProducerMetadata *GrpcKafkaConnectionMetadata       `protobuf:"bytes,2,opt,name=producerMetadata,proto3" json:"producerMetadata,omitempty"`
	CaseInfo         *GrpcProcessInfo                   `protobuf:"bytes,3,opt,name=caseInfo,proto3" json:"caseInfo,omitempty"`
	SubscriptionId   *GrpcGuid                          `protobuf:"bytes,4,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineId       *GrpcGuid                          `protobuf:"bytes,5,opt,name=pipelineId,proto3" json:"pipelineId,omitempty"`
	PipelineName     string                             `protobuf:"bytes,6,opt,name=pipelineName,proto3" json:"pipelineName,omitempty"`
	SubscriptionName string                             `protobuf:"bytes,7,opt,name=subscriptionName,proto3" json:"subscriptionName,omitempty"`
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) Reset() {
	*x = GrpcExecutePipelineAndProduceKafkaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcExecutePipelineAndProduceKafkaRequest) ProtoMessage() {}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcExecutePipelineAndProduceKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcExecutePipelineAndProduceKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{0}
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineRequest() *GrpcProxyPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetProducerMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ProducerMetadata
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetCaseInfo() *GrpcProcessInfo {
	if x != nil {
		return x.CaseInfo
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineId() *GrpcGuid {
	if x != nil {
		return x.PipelineId
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

type GrpcProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=processName,proto3" json:"processName,omitempty"`
	CaseName    string `protobuf:"bytes,2,opt,name=caseName,proto3" json:"caseName,omitempty"`
}

func (x *GrpcProcessInfo) Reset() {
	*x = GrpcProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcProcessInfo) ProtoMessage() {}

func (x *GrpcProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcProcessInfo.ProtoReflect.Descriptor instead.
func (*GrpcProcessInfo) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{1}
}

func (x *GrpcProcessInfo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *GrpcProcessInfo) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

type GrpcSubscribeToKafkaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionMetadata   *GrpcKafkaConnectionMetadata   `protobuf:"bytes,1,opt,name=connectionMetadata,proto3" json:"connectionMetadata,omitempty"`
	SubscriptionMetadata *GrpcKafkaSubscriptionMetadata `protobuf:"bytes,2,opt,name=subscriptionMetadata,proto3" json:"subscriptionMetadata,omitempty"`
}

func (x *GrpcSubscribeToKafkaRequest) Reset() {
	*x = GrpcSubscribeToKafkaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcSubscribeToKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSubscribeToKafkaRequest) ProtoMessage() {}

func (x *GrpcSubscribeToKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSubscribeToKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcSubscribeToKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcSubscribeToKafkaRequest) GetConnectionMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ConnectionMetadata
	}
	return nil
}

func (x *GrpcSubscribeToKafkaRequest) GetSubscriptionMetadata() *GrpcKafkaSubscriptionMetadata {
	if x != nil {
		return x.SubscriptionMetadata
	}
	return nil
}

type GrpcKafkaSubscriptionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionName string `protobuf:"bytes,1,opt,name=subscriptionName,proto3" json:"subscriptionName,omitempty"`
}

func (x *GrpcKafkaSubscriptionMetadata) Reset() {
	*x = GrpcKafkaSubscriptionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaSubscriptionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSubscriptionMetadata) ProtoMessage() {}

func (x *GrpcKafkaSubscriptionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSubscriptionMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSubscriptionMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{3}
}

func (x *GrpcKafkaSubscriptionMetadata) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

type GrpcKafkaPipelineExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId         *GrpcGuid                           `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineRequest        *GrpcPipelineExecutionRequest       `protobuf:"bytes,2,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	PipelineMetadata       *GrpcPipelineMetadata               `protobuf:"bytes,3,opt,name=pipelineMetadata,proto3" json:"pipelineMetadata,omitempty"`
	StreamingConfiguration *GrpcPipelineStreamingConfiguration `protobuf:"bytes,4,opt,name=streamingConfiguration,proto3" json:"streamingConfiguration,omitempty"`
}

func (x *GrpcKafkaPipelineExecutionRequest) Reset() {
	*x = GrpcKafkaPipelineExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaPipelineExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaPipelineExecutionRequest) ProtoMessage() {}

func (x *GrpcKafkaPipelineExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaPipelineExecutionRequest.ProtoReflect.Descriptor instead.
func (*GrpcKafkaPipelineExecutionRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcKafkaPipelineExecutionRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetPipelineRequest() *GrpcPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetPipelineMetadata() *GrpcPipelineMetadata {
	if x != nil {
		return x.PipelineMetadata
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetStreamingConfiguration() *GrpcPipelineStreamingConfiguration {
	if x != nil {
		return x.StreamingConfiguration
	}
	return nil
}

type GrpcPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GrpcPipelineMetadata) Reset() {
	*x = GrpcPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcPipelineMetadata) ProtoMessage() {}

func (x *GrpcPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcPipelineMetadata.ProtoReflect.Descriptor instead.
func (*GrpcPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{5}
}

func (x *GrpcPipelineMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GrpcAddPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineRequest       *GrpcKafkaPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	ProducerKafkaMetadata *GrpcKafkaConnectionMetadata       `protobuf:"bytes,2,opt,name=producerKafkaMetadata,proto3" json:"producerKafkaMetadata,omitempty"`
}

func (x *GrpcAddPipelineRequest) Reset() {
	*x = GrpcAddPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcAddPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcAddPipelineRequest) ProtoMessage() {}

func (x *GrpcAddPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcAddPipelineRequest.ProtoReflect.Descriptor instead.
func (*GrpcAddPipelineRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{6}
}

func (x *GrpcAddPipelineRequest) GetPipelineRequest() *GrpcKafkaPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcAddPipelineRequest) GetProducerKafkaMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ProducerKafkaMetadata
	}
	return nil
}

type GrpcPipelineStreamingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Configuration:
	//
	//	*GrpcPipelineStreamingConfiguration_NotSpecified
	//	*GrpcPipelineStreamingConfiguration_T1Configuration
	//	*GrpcPipelineStreamingConfiguration_T2Configuration
	Configuration isGrpcPipelineStreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
}

func (x *GrpcPipelineStreamingConfiguration) Reset() {
	*x = GrpcPipelineStreamingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcPipelineStreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcPipelineStreamingConfiguration) ProtoMessage() {}

func (x *GrpcPipelineStreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcPipelineStreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcPipelineStreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{7}
}

func (m *GrpcPipelineStreamingConfiguration) GetConfiguration() isGrpcPipelineStreamingConfiguration_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetNotSpecified() *emptypb.Empty {
	if x, ok := x.GetConfiguration().(*GrpcPipelineStreamingConfiguration_NotSpecified); ok {
		return x.NotSpecified
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetT1Configuration() *GrpcT1StreamingConfiguration {
	if x, ok := x.GetConfiguration().(*GrpcPipelineStreamingConfiguration_T1Configuration); ok {
		return x.T1Configuration
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetT2Configuration() *GrpcT2StreamingConfiguration {
	if x, ok := x.GetConfiguration().(*GrpcPipelineStreamingConfiguration_T2Configuration); ok {
		return x.T2Configuration
	}
	return nil
}

type isGrpcPipelineStreamingConfiguration_Configuration interface {
	isGrpcPipelineStreamingConfiguration_Configuration()
}

type GrpcPipelineStreamingConfiguration_NotSpecified struct {
	NotSpecified *emptypb.Empty `protobuf:"bytes,1,opt,name=notSpecified,proto3,oneof"`
}

type GrpcPipelineStreamingConfiguration_T1Configuration struct {
	T1Configuration *GrpcT1StreamingConfiguration `protobuf:"bytes,2,opt,name=t1Configuration,proto3,oneof"`
}

type GrpcPipelineStreamingConfiguration_T2Configuration struct {
	T2Configuration *GrpcT2StreamingConfiguration `protobuf:"bytes,3,opt,name=t2Configuration,proto3,oneof"`
}

func (*GrpcPipelineStreamingConfiguration_NotSpecified) isGrpcPipelineStreamingConfiguration_Configuration() {
}

func (*GrpcPipelineStreamingConfiguration_T1Configuration) isGrpcPipelineStreamingConfiguration_Configuration() {
}

func (*GrpcPipelineStreamingConfiguration_T2Configuration) isGrpcPipelineStreamingConfiguration_Configuration() {
}

type GrpcT1StreamingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Configuration:
	//
	//	*GrpcT1StreamingConfiguration_EventsTimeout
	//	*GrpcT1StreamingConfiguration_TracesTimeout
	//	*GrpcT1StreamingConfiguration_TracesQueueConfiguration
	Configuration isGrpcT1StreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
}

func (x *GrpcT1StreamingConfiguration) Reset() {
	*x = GrpcT1StreamingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT1StreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1StreamingConfiguration) ProtoMessage() {}

func (x *GrpcT1StreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1StreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT1StreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{8}
}

func (m *GrpcT1StreamingConfiguration) GetConfiguration() isGrpcT1StreamingConfiguration_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetEventsTimeout() *GrpcT1EventsTimeBasedCaching {
	if x, ok := x.GetConfiguration().(*GrpcT1StreamingConfiguration_EventsTimeout); ok {
		return x.EventsTimeout
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetTracesTimeout() *GrpcT1TraceTimeBasedCaching {
	if x, ok := x.GetConfiguration().(*GrpcT1StreamingConfiguration_TracesTimeout); ok {
		return x.TracesTimeout
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetTracesQueueConfiguration() *GrpcT1TracesQueueConfiguration {
	if x, ok := x.GetConfiguration().(*GrpcT1StreamingConfiguration_TracesQueueConfiguration); ok {
		return x.TracesQueueConfiguration
	}
	return nil
}

type isGrpcT1StreamingConfiguration_Configuration interface {
	isGrpcT1StreamingConfiguration_Configuration()
}

type GrpcT1StreamingConfiguration_EventsTimeout struct {
	EventsTimeout *GrpcT1EventsTimeBasedCaching `protobuf:"bytes,1,opt,name=eventsTimeout,proto3,oneof"`
}

type GrpcT1StreamingConfiguration_TracesTimeout struct {
	TracesTimeout *GrpcT1TraceTimeBasedCaching `protobuf:"bytes,2,opt,name=tracesTimeout,proto3,oneof"`
}

type GrpcT1StreamingConfiguration_TracesQueueConfiguration struct {
	TracesQueueConfiguration *GrpcT1TracesQueueConfiguration `protobuf:"bytes,3,opt,name=tracesQueueConfiguration,proto3,oneof"`
}

func (*GrpcT1StreamingConfiguration_EventsTimeout) isGrpcT1StreamingConfiguration_Configuration() {}

func (*GrpcT1StreamingConfiguration_TracesTimeout) isGrpcT1StreamingConfiguration_Configuration() {}

func (*GrpcT1StreamingConfiguration_TracesQueueConfiguration) isGrpcT1StreamingConfiguration_Configuration() {
}

type GrpcT1TracesQueueConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueCapacity int64 `protobuf:"varint,1,opt,name=queueCapacity,proto3" json:"queueCapacity,omitempty"`
}

func (x *GrpcT1TracesQueueConfiguration) Reset() {
	*x = GrpcT1TracesQueueConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT1TracesQueueConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1TracesQueueConfiguration) ProtoMessage() {}

func (x *GrpcT1TracesQueueConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1TracesQueueConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT1TracesQueueConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{9}
}

func (x *GrpcT1TracesQueueConfiguration) GetQueueCapacity() int64 {
	if x != nil {
		return x.QueueCapacity
	}
	return 0
}

type GrpcT1EventsTimeBasedCaching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventsTimeoutMs int64 `protobuf:"varint,1,opt,name=eventsTimeoutMs,proto3" json:"eventsTimeoutMs,omitempty"`
}

func (x *GrpcT1EventsTimeBasedCaching) Reset() {
	*x = GrpcT1EventsTimeBasedCaching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT1EventsTimeBasedCaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1EventsTimeBasedCaching) ProtoMessage() {}

func (x *GrpcT1EventsTimeBasedCaching) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1EventsTimeBasedCaching.ProtoReflect.Descriptor instead.
func (*GrpcT1EventsTimeBasedCaching) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{10}
}

func (x *GrpcT1EventsTimeBasedCaching) GetEventsTimeoutMs() int64 {
	if x != nil {
		return x.EventsTimeoutMs
	}
	return 0
}

type GrpcT1TraceTimeBasedCaching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TracesTimeoutMs int64 `protobuf:"varint,1,opt,name=tracesTimeoutMs,proto3" json:"tracesTimeoutMs,omitempty"`
}

func (x *GrpcT1TraceTimeBasedCaching) Reset() {
	*x = GrpcT1TraceTimeBasedCaching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT1TraceTimeBasedCaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1TraceTimeBasedCaching) ProtoMessage() {}

func (x *GrpcT1TraceTimeBasedCaching) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1TraceTimeBasedCaching.ProtoReflect.Descriptor instead.
func (*GrpcT1TraceTimeBasedCaching) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{11}
}

func (x *GrpcT1TraceTimeBasedCaching) GetTracesTimeoutMs() int64 {
	if x != nil {
		return x.TracesTimeoutMs
	}
	return 0
}

type GrpcT2StreamingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Configuration:
	//
	//	*GrpcT2StreamingConfiguration_LossyCount
	//	*GrpcT2StreamingConfiguration_TimedSlidingWindow
	Configuration                   isGrpcT2StreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
	IncomingTracesFilteringPipeline *GrpcPipeline                                `protobuf:"bytes,3,opt,name=incomingTracesFilteringPipeline,proto3" json:"incomingTracesFilteringPipeline,omitempty"`
}

func (x *GrpcT2StreamingConfiguration) Reset() {
	*x = GrpcT2StreamingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT2StreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2StreamingConfiguration) ProtoMessage() {}

func (x *GrpcT2StreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2StreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2StreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{12}
}

func (m *GrpcT2StreamingConfiguration) GetConfiguration() isGrpcT2StreamingConfiguration_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetLossyCount() *GrpcT2LossyCountConfiguration {
	if x, ok := x.GetConfiguration().(*GrpcT2StreamingConfiguration_LossyCount); ok {
		return x.LossyCount
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetTimedSlidingWindow() *GrpcT2TimedSlidingWindowConfiguration {
	if x, ok := x.GetConfiguration().(*GrpcT2StreamingConfiguration_TimedSlidingWindow); ok {
		return x.TimedSlidingWindow
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetIncomingTracesFilteringPipeline() *GrpcPipeline {
	if x != nil {
		return x.IncomingTracesFilteringPipeline
	}
	return nil
}

type isGrpcT2StreamingConfiguration_Configuration interface {
	isGrpcT2StreamingConfiguration_Configuration()
}

type GrpcT2StreamingConfiguration_LossyCount struct {
	LossyCount *GrpcT2LossyCountConfiguration `protobuf:"bytes,1,opt,name=lossyCount,proto3,oneof"`
}

type GrpcT2StreamingConfiguration_TimedSlidingWindow struct {
	TimedSlidingWindow *GrpcT2TimedSlidingWindowConfiguration `protobuf:"bytes,2,opt,name=timedSlidingWindow,proto3,oneof"`
}

func (*GrpcT2StreamingConfiguration_LossyCount) isGrpcT2StreamingConfiguration_Configuration() {}

func (*GrpcT2StreamingConfiguration_TimedSlidingWindow) isGrpcT2StreamingConfiguration_Configuration() {
}

type GrpcT2LossyCountConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   float64 `protobuf:"fixed64,1,opt,name=error,proto3" json:"error,omitempty"`
	Support float64 `protobuf:"fixed64,2,opt,name=support,proto3" json:"support,omitempty"`
}

func (x *GrpcT2LossyCountConfiguration) Reset() {
	*x = GrpcT2LossyCountConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT2LossyCountConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2LossyCountConfiguration) ProtoMessage() {}

func (x *GrpcT2LossyCountConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2LossyCountConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2LossyCountConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{13}
}

func (x *GrpcT2LossyCountConfiguration) GetError() float64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GrpcT2LossyCountConfiguration) GetSupport() float64 {
	if x != nil {
		return x.Support
	}
	return 0
}

type GrpcT2TimedSlidingWindowConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifespanMs int64 `protobuf:"varint,1,opt,name=lifespanMs,proto3" json:"lifespanMs,omitempty"`
}

func (x *GrpcT2TimedSlidingWindowConfiguration) Reset() {
	*x = GrpcT2TimedSlidingWindowConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcT2TimedSlidingWindowConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2TimedSlidingWindowConfiguration) ProtoMessage() {}

func (x *GrpcT2TimedSlidingWindowConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2TimedSlidingWindowConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2TimedSlidingWindowConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{14}
}

func (x *GrpcT2TimedSlidingWindowConfiguration) GetLifespanMs() int64 {
	if x != nil {
		return x.LifespanMs
	}
	return 0
}

type GrpcAddPipelineStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineRequest *GrpcKafkaPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
}

func (x *GrpcAddPipelineStreamRequest) Reset() {
	*x = GrpcAddPipelineStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcAddPipelineStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcAddPipelineStreamRequest) ProtoMessage() {}

func (x *GrpcAddPipelineStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcAddPipelineStreamRequest.ProtoReflect.Descriptor instead.
func (*GrpcAddPipelineStreamRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{15}
}

func (x *GrpcAddPipelineStreamRequest) GetPipelineRequest() *GrpcKafkaPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

type GrpcRemovePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId *GrpcGuid `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineId     *GrpcGuid `protobuf:"bytes,2,opt,name=pipelineId,proto3" json:"pipelineId,omitempty"`
}

func (x *GrpcRemovePipelineRequest) Reset() {
	*x = GrpcRemovePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcRemovePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRemovePipelineRequest) ProtoMessage() {}

func (x *GrpcRemovePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRemovePipelineRequest.ProtoReflect.Descriptor instead.
func (*GrpcRemovePipelineRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{16}
}

func (x *GrpcRemovePipelineRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcRemovePipelineRequest) GetPipelineId() *GrpcGuid {
	if x != nil {
		return x.PipelineId
	}
	return nil
}

type GrpcRemoveAllPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId *GrpcGuid `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (x *GrpcRemoveAllPipelinesRequest) Reset() {
	*x = GrpcRemoveAllPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcRemoveAllPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRemoveAllPipelinesRequest) ProtoMessage() {}

func (x *GrpcRemoveAllPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRemoveAllPipelinesRequest.ProtoReflect.Descriptor instead.
func (*GrpcRemoveAllPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{17}
}

func (x *GrpcRemoveAllPipelinesRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

type GrpcKafkaConnectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName string               `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	Metadata  []*GrpcKafkaMetadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GrpcKafkaConnectionMetadata) Reset() {
	*x = GrpcKafkaConnectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaConnectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaConnectionMetadata) ProtoMessage() {}

func (x *GrpcKafkaConnectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaConnectionMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaConnectionMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{18}
}

func (x *GrpcKafkaConnectionMetadata) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GrpcKafkaConnectionMetadata) GetMetadata() []*GrpcKafkaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GrpcKafkaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GrpcKafkaMetadata) Reset() {
	*x = GrpcKafkaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaMetadata) ProtoMessage() {}

func (x *GrpcKafkaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{19}
}

func (x *GrpcKafkaMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GrpcKafkaMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GrpcKafkaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GrpcKafkaResult_Success
	//	*GrpcKafkaResult_Failure
	Result isGrpcKafkaResult_Result `protobuf_oneof:"result"`
}

func (x *GrpcKafkaResult) Reset() {
	*x = GrpcKafkaResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaResult) ProtoMessage() {}

func (x *GrpcKafkaResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{20}
}

func (m *GrpcKafkaResult) GetResult() isGrpcKafkaResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GrpcKafkaResult) GetSuccess() *GrpcKafkaSuccessResult {
	if x, ok := x.GetResult().(*GrpcKafkaResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *GrpcKafkaResult) GetFailure() *GrpcKafkaFailedResult {
	if x, ok := x.GetResult().(*GrpcKafkaResult_Failure); ok {
		return x.Failure
	}
	return nil
}

type isGrpcKafkaResult_Result interface {
	isGrpcKafkaResult_Result()
}

type GrpcKafkaResult_Success struct {
	Success *GrpcKafkaSuccessResult `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GrpcKafkaResult_Failure struct {
	Failure *GrpcKafkaFailedResult `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*GrpcKafkaResult_Success) isGrpcKafkaResult_Result() {}

func (*GrpcKafkaResult_Failure) isGrpcKafkaResult_Result() {}

type GrpcKafkaSuccessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *GrpcGuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GrpcKafkaSuccessResult) Reset() {
	*x = GrpcKafkaSuccessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaSuccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSuccessResult) ProtoMessage() {}

func (x *GrpcKafkaSuccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSuccessResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSuccessResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{21}
}

func (x *GrpcKafkaSuccessResult) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type GrpcKafkaFailedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *GrpcKafkaFailedResult) Reset() {
	*x = GrpcKafkaFailedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaFailedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaFailedResult) ProtoMessage() {}

func (x *GrpcKafkaFailedResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaFailedResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaFailedResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{22}
}

func (x *GrpcKafkaFailedResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GrpcUnsubscribeFromKafkaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId *GrpcGuid `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (x *GrpcUnsubscribeFromKafkaRequest) Reset() {
	*x = GrpcUnsubscribeFromKafkaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcUnsubscribeFromKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcUnsubscribeFromKafkaRequest) ProtoMessage() {}

func (x *GrpcUnsubscribeFromKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcUnsubscribeFromKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcUnsubscribeFromKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{23}
}

func (x *GrpcUnsubscribeFromKafkaRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

type GrpcGetAllSubscriptionsAndPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*GrpcKafkaSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) Reset() {
	*x = GrpcGetAllSubscriptionsAndPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcGetAllSubscriptionsAndPipelinesResponse) ProtoMessage() {}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcGetAllSubscriptionsAndPipelinesResponse.ProtoReflect.Descriptor instead.
func (*GrpcGetAllSubscriptionsAndPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{24}
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) GetSubscriptions() []*GrpcKafkaSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type GrpcKafkaSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *GrpcGuid                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata  *GrpcKafkaSubscriptionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Pipelines []*GrpcSubscriptionPipeline    `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *GrpcKafkaSubscription) Reset() {
	*x = GrpcKafkaSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKafkaSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSubscription) ProtoMessage() {}

func (x *GrpcKafkaSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSubscription.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSubscription) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{25}
}

func (x *GrpcKafkaSubscription) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GrpcKafkaSubscription) GetMetadata() *GrpcKafkaSubscriptionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GrpcKafkaSubscription) GetPipelines() []*GrpcSubscriptionPipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type GrpcSubscriptionPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *GrpcGuid             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *GrpcPipelineMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GrpcSubscriptionPipeline) Reset() {
	*x = GrpcSubscriptionPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcSubscriptionPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSubscriptionPipeline) ProtoMessage() {}

func (x *GrpcSubscriptionPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSubscriptionPipeline.ProtoReflect.Descriptor instead.
func (*GrpcSubscriptionPipeline) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{26}
}

func (x *GrpcSubscriptionPipeline) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GrpcSubscriptionPipeline) GetMetadata() *GrpcPipelineMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_kafka_service_proto protoreflect.FileDescriptor

var file_kafka_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x63, 0x75, 0x73, 0x1a, 0x1b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x03, 0x0a, 0x29, 0x47, 0x72,
	0x70, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x63,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x37, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x72, 0x70,
	0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1b, 0x47,
	0x72, 0x70, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58,
	0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x1d, 0x47, 0x72, 0x70, 0x63,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x21, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x47, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x16,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2a, 0x0a, 0x14, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x16,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x63, 0x75,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x22, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x74, 0x31, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x54,
	0x31, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x31, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x74, 0x32,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x54, 0x32, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x32, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x02, 0x0a,
	0x1c, 0x47, 0x72, 0x70, 0x63, 0x54, 0x31, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x54, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x54, 0x31,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x54, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x1e,
	0x47, 0x72, 0x70, 0x63, 0x54, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x72, 0x70, 0x63, 0x54, 0x31, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22, 0x47,
	0x0a, 0x1b, 0x47, 0x72, 0x70, 0x63, 0x54, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x47, 0x72, 0x70, 0x63,
	0x54, 0x32, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x73,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x54, 0x32, 0x4c, 0x6f, 0x73, 0x73, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x54, 0x32, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x5d, 0x0a, 0x1f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x63, 0x75,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x1f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x72, 0x70, 0x63, 0x54, 0x32, 0x4c, 0x6f, 0x73, 0x73, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x47, 0x0a, 0x25, 0x47, 0x72, 0x70, 0x63, 0x54, 0x32, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4d, 0x73, 0x22, 0x72, 0x0a, 0x1c, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85,
	0x01, 0x0a, 0x19, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x1b, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b,
	0x0a, 0x15, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x1f, 0x47,
	0x72, 0x70, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x2b, 0x47, 0x72, 0x70, 0x63, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x47,
	0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x63,
	0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x72, 0x70, 0x63, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb2, 0x06, 0x0a,
	0x10, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f,
	0x72, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x66, 0x69,
	0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66,
	0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64,
	0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x66, 0x69,
	0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x1a, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x69, 0x63,
	0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x69, 0x63,
	0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e,
	0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x6f,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x30, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69, 0x63, 0x75, 0x73, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kafka_service_proto_rawDescOnce sync.Once
	file_kafka_service_proto_rawDescData = file_kafka_service_proto_rawDesc
)

func file_kafka_service_proto_rawDescGZIP() []byte {
	file_kafka_service_proto_rawDescOnce.Do(func() {
		file_kafka_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kafka_service_proto_rawDescData)
	})
	return file_kafka_service_proto_rawDescData
}

var file_kafka_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_kafka_service_proto_goTypes = []interface{}{
	(*GrpcExecutePipelineAndProduceKafkaRequest)(nil),   // 0: ficus.GrpcExecutePipelineAndProduceKafkaRequest
	(*GrpcProcessInfo)(nil),                             // 1: ficus.GrpcProcessInfo
	(*GrpcSubscribeToKafkaRequest)(nil),                 // 2: ficus.GrpcSubscribeToKafkaRequest
	(*GrpcKafkaSubscriptionMetadata)(nil),               // 3: ficus.GrpcKafkaSubscriptionMetadata
	(*GrpcKafkaPipelineExecutionRequest)(nil),           // 4: ficus.GrpcKafkaPipelineExecutionRequest
	(*GrpcPipelineMetadata)(nil),                        // 5: ficus.GrpcPipelineMetadata
	(*GrpcAddPipelineRequest)(nil),                      // 6: ficus.GrpcAddPipelineRequest
	(*GrpcPipelineStreamingConfiguration)(nil),          // 7: ficus.GrpcPipelineStreamingConfiguration
	(*GrpcT1StreamingConfiguration)(nil),                // 8: ficus.GrpcT1StreamingConfiguration
	(*GrpcT1TracesQueueConfiguration)(nil),              // 9: ficus.GrpcT1TracesQueueConfiguration
	(*GrpcT1EventsTimeBasedCaching)(nil),                // 10: ficus.GrpcT1EventsTimeBasedCaching
	(*GrpcT1TraceTimeBasedCaching)(nil),                 // 11: ficus.GrpcT1TraceTimeBasedCaching
	(*GrpcT2StreamingConfiguration)(nil),                // 12: ficus.GrpcT2StreamingConfiguration
	(*GrpcT2LossyCountConfiguration)(nil),               // 13: ficus.GrpcT2LossyCountConfiguration
	(*GrpcT2TimedSlidingWindowConfiguration)(nil),       // 14: ficus.GrpcT2TimedSlidingWindowConfiguration
	(*GrpcAddPipelineStreamRequest)(nil),                // 15: ficus.GrpcAddPipelineStreamRequest
	(*GrpcRemovePipelineRequest)(nil),                   // 16: ficus.GrpcRemovePipelineRequest
	(*GrpcRemoveAllPipelinesRequest)(nil),               // 17: ficus.GrpcRemoveAllPipelinesRequest
	(*GrpcKafkaConnectionMetadata)(nil),                 // 18: ficus.GrpcKafkaConnectionMetadata
	(*GrpcKafkaMetadata)(nil),                           // 19: ficus.GrpcKafkaMetadata
	(*GrpcKafkaResult)(nil),                             // 20: ficus.GrpcKafkaResult
	(*GrpcKafkaSuccessResult)(nil),                      // 21: ficus.GrpcKafkaSuccessResult
	(*GrpcKafkaFailedResult)(nil),                       // 22: ficus.GrpcKafkaFailedResult
	(*GrpcUnsubscribeFromKafkaRequest)(nil),             // 23: ficus.GrpcUnsubscribeFromKafkaRequest
	(*GrpcGetAllSubscriptionsAndPipelinesResponse)(nil), // 24: ficus.GrpcGetAllSubscriptionsAndPipelinesResponse
	(*GrpcKafkaSubscription)(nil),                       // 25: ficus.GrpcKafkaSubscription
	(*GrpcSubscriptionPipeline)(nil),                    // 26: ficus.GrpcSubscriptionPipeline
	(*GrpcProxyPipelineExecutionRequest)(nil),           // 27: ficus.GrpcProxyPipelineExecutionRequest
	(*GrpcGuid)(nil),                                    // 28: ficus.GrpcGuid
	(*GrpcPipelineExecutionRequest)(nil),                // 29: ficus.GrpcPipelineExecutionRequest
	(*emptypb.Empty)(nil),                               // 30: google.protobuf.Empty
	(*GrpcPipeline)(nil),                                // 31: ficus.GrpcPipeline
	(*GrpcPipelinePartExecutionResult)(nil),             // 32: ficus.GrpcPipelinePartExecutionResult
}
var file_kafka_service_proto_depIdxs = []int32{
	27, // 0: ficus.GrpcExecutePipelineAndProduceKafkaRequest.pipelineRequest:type_name -> ficus.GrpcProxyPipelineExecutionRequest
	18, // 1: ficus.GrpcExecutePipelineAndProduceKafkaRequest.producerMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	1,  // 2: ficus.GrpcExecutePipelineAndProduceKafkaRequest.caseInfo:type_name -> ficus.GrpcProcessInfo
	28, // 3: ficus.GrpcExecutePipelineAndProduceKafkaRequest.subscriptionId:type_name -> ficus.GrpcGuid
	28, // 4: ficus.GrpcExecutePipelineAndProduceKafkaRequest.pipelineId:type_name -> ficus.GrpcGuid
	18, // 5: ficus.GrpcSubscribeToKafkaRequest.connectionMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	3,  // 6: ficus.GrpcSubscribeToKafkaRequest.subscriptionMetadata:type_name -> ficus.GrpcKafkaSubscriptionMetadata
	28, // 7: ficus.GrpcKafkaPipelineExecutionRequest.subscriptionId:type_name -> ficus.GrpcGuid
	29, // 8: ficus.GrpcKafkaPipelineExecutionRequest.pipelineRequest:type_name -> ficus.GrpcPipelineExecutionRequest
	5,  // 9: ficus.GrpcKafkaPipelineExecutionRequest.pipelineMetadata:type_name -> ficus.GrpcPipelineMetadata
	7,  // 10: ficus.GrpcKafkaPipelineExecutionRequest.streamingConfiguration:type_name -> ficus.GrpcPipelineStreamingConfiguration
	4,  // 11: ficus.GrpcAddPipelineRequest.pipelineRequest:type_name -> ficus.GrpcKafkaPipelineExecutionRequest
	18, // 12: ficus.GrpcAddPipelineRequest.producerKafkaMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	30, // 13: ficus.GrpcPipelineStreamingConfiguration.notSpecified:type_name -> google.protobuf.Empty
	8,  // 14: ficus.GrpcPipelineStreamingConfiguration.t1Configuration:type_name -> ficus.GrpcT1StreamingConfiguration
	12, // 15: ficus.GrpcPipelineStreamingConfiguration.t2Configuration:type_name -> ficus.GrpcT2StreamingConfiguration
	10, // 16: ficus.GrpcT1StreamingConfiguration.eventsTimeout:type_name -> ficus.GrpcT1EventsTimeBasedCaching
	11, // 17: ficus.GrpcT1StreamingConfiguration.tracesTimeout:type_name -> ficus.GrpcT1TraceTimeBasedCaching
	9,  // 18: ficus.GrpcT1StreamingConfiguration.tracesQueueConfiguration:type_name -> ficus.GrpcT1TracesQueueConfiguration
	13, // 19: ficus.GrpcT2StreamingConfiguration.lossyCount:type_name -> ficus.GrpcT2LossyCountConfiguration
	14, // 20: ficus.GrpcT2StreamingConfiguration.timedSlidingWindow:type_name -> ficus.GrpcT2TimedSlidingWindowConfiguration
	31, // 21: ficus.GrpcT2StreamingConfiguration.incomingTracesFilteringPipeline:type_name -> ficus.GrpcPipeline
	4,  // 22: ficus.GrpcAddPipelineStreamRequest.pipelineRequest:type_name -> ficus.GrpcKafkaPipelineExecutionRequest
	28, // 23: ficus.GrpcRemovePipelineRequest.subscriptionId:type_name -> ficus.GrpcGuid
	28, // 24: ficus.GrpcRemovePipelineRequest.pipelineId:type_name -> ficus.GrpcGuid
	28, // 25: ficus.GrpcRemoveAllPipelinesRequest.subscriptionId:type_name -> ficus.GrpcGuid
	19, // 26: ficus.GrpcKafkaConnectionMetadata.metadata:type_name -> ficus.GrpcKafkaMetadata
	21, // 27: ficus.GrpcKafkaResult.success:type_name -> ficus.GrpcKafkaSuccessResult
	22, // 28: ficus.GrpcKafkaResult.failure:type_name -> ficus.GrpcKafkaFailedResult
	28, // 29: ficus.GrpcKafkaSuccessResult.id:type_name -> ficus.GrpcGuid
	28, // 30: ficus.GrpcUnsubscribeFromKafkaRequest.subscriptionId:type_name -> ficus.GrpcGuid
	25, // 31: ficus.GrpcGetAllSubscriptionsAndPipelinesResponse.subscriptions:type_name -> ficus.GrpcKafkaSubscription
	28, // 32: ficus.GrpcKafkaSubscription.id:type_name -> ficus.GrpcGuid
	3,  // 33: ficus.GrpcKafkaSubscription.metadata:type_name -> ficus.GrpcKafkaSubscriptionMetadata
	26, // 34: ficus.GrpcKafkaSubscription.pipelines:type_name -> ficus.GrpcSubscriptionPipeline
	28, // 35: ficus.GrpcSubscriptionPipeline.id:type_name -> ficus.GrpcGuid
	5,  // 36: ficus.GrpcSubscriptionPipeline.metadata:type_name -> ficus.GrpcPipelineMetadata
	2,  // 37: ficus.GrpcKafkaService.SubscribeForKafkaTopic:input_type -> ficus.GrpcSubscribeToKafkaRequest
	23, // 38: ficus.GrpcKafkaService.UnsubscribeFromKafkaTopic:input_type -> ficus.GrpcUnsubscribeFromKafkaRequest
	6,  // 39: ficus.GrpcKafkaService.AddPipelineToSubscription:input_type -> ficus.GrpcAddPipelineRequest
	15, // 40: ficus.GrpcKafkaService.AddPipelineToSubscriptionStream:input_type -> ficus.GrpcAddPipelineStreamRequest
	16, // 41: ficus.GrpcKafkaService.RemovePipelineSubscription:input_type -> ficus.GrpcRemovePipelineRequest
	17, // 42: ficus.GrpcKafkaService.RemoveAllPipelineSubscriptions:input_type -> ficus.GrpcRemoveAllPipelinesRequest
	30, // 43: ficus.GrpcKafkaService.GetAllSubscriptionsAndPipelines:input_type -> google.protobuf.Empty
	0,  // 44: ficus.GrpcKafkaService.ExecutePipelineAndProduceToKafka:input_type -> ficus.GrpcExecutePipelineAndProduceKafkaRequest
	20, // 45: ficus.GrpcKafkaService.SubscribeForKafkaTopic:output_type -> ficus.GrpcKafkaResult
	20, // 46: ficus.GrpcKafkaService.UnsubscribeFromKafkaTopic:output_type -> ficus.GrpcKafkaResult
	20, // 47: ficus.GrpcKafkaService.AddPipelineToSubscription:output_type -> ficus.GrpcKafkaResult
	32, // 48: ficus.GrpcKafkaService.AddPipelineToSubscriptionStream:output_type -> ficus.GrpcPipelinePartExecutionResult
	20, // 49: ficus.GrpcKafkaService.RemovePipelineSubscription:output_type -> ficus.GrpcKafkaResult
	20, // 50: ficus.GrpcKafkaService.RemoveAllPipelineSubscriptions:output_type -> ficus.GrpcKafkaResult
	24, // 51: ficus.GrpcKafkaService.GetAllSubscriptionsAndPipelines:output_type -> ficus.GrpcGetAllSubscriptionsAndPipelinesResponse
	32, // 52: ficus.GrpcKafkaService.ExecutePipelineAndProduceToKafka:output_type -> ficus.GrpcPipelinePartExecutionResult
	45, // [45:53] is the sub-list for method output_type
	37, // [37:45] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_kafka_service_proto_init() }
func file_kafka_service_proto_init() {
	if File_kafka_service_proto != nil {
		return
	}
	file_pipelines_and_context_proto_init()
	file_util_proto_init()
	file_backend_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kafka_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcExecutePipelineAndProduceKafkaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcSubscribeToKafkaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaSubscriptionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaPipelineExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcAddPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcPipelineStreamingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT1StreamingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT1TracesQueueConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT1EventsTimeBasedCaching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT1TraceTimeBasedCaching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT2StreamingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT2LossyCountConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcT2TimedSlidingWindowConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcAddPipelineStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcRemovePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcRemoveAllPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaConnectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaSuccessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaFailedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcUnsubscribeFromKafkaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcGetAllSubscriptionsAndPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcKafkaSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcSubscriptionPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kafka_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GrpcPipelineStreamingConfiguration_NotSpecified)(nil),
		(*GrpcPipelineStreamingConfiguration_T1Configuration)(nil),
		(*GrpcPipelineStreamingConfiguration_T2Configuration)(nil),
	}
	file_kafka_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GrpcT1StreamingConfiguration_EventsTimeout)(nil),
		(*GrpcT1StreamingConfiguration_TracesTimeout)(nil),
		(*GrpcT1StreamingConfiguration_TracesQueueConfiguration)(nil),
	}
	file_kafka_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GrpcT2StreamingConfiguration_LossyCount)(nil),
		(*GrpcT2StreamingConfiguration_TimedSlidingWindow)(nil),
	}
	file_kafka_service_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GrpcKafkaResult_Success)(nil),
		(*GrpcKafkaResult_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kafka_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kafka_service_proto_goTypes,
		DependencyIndexes: file_kafka_service_proto_depIdxs,
		MessageInfos:      file_kafka_service_proto_msgTypes,
	}.Build()
	File_kafka_service_proto = out.File
	file_kafka_service_proto_rawDesc = nil
	file_kafka_service_proto_goTypes = nil
	file_kafka_service_proto_depIdxs = nil
}
