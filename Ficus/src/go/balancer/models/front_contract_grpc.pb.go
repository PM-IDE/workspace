// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: front_contract.proto

package grpc_models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcPipelinePartsContextValuesService_GetSubscriptionAndPipelinesState_FullMethodName = "/ficus.GrpcPipelinePartsContextValuesService/GetSubscriptionAndPipelinesState"
	GrpcPipelinePartsContextValuesService_GetPipelineCaseContextValue_FullMethodName      = "/ficus.GrpcPipelinePartsContextValuesService/GetPipelineCaseContextValue"
)

// GrpcPipelinePartsContextValuesServiceClient is the client API for GrpcPipelinePartsContextValuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcPipelinePartsContextValuesServiceClient interface {
	GetSubscriptionAndPipelinesState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcSubscriptionAndPipelinesStateResponse, error)
	GetPipelineCaseContextValue(ctx context.Context, in *GrpcGetPipelineCaseContextValuesRequest, opts ...grpc.CallOption) (*GrpcCaseContextValues, error)
}

type grpcPipelinePartsContextValuesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcPipelinePartsContextValuesServiceClient(cc grpc.ClientConnInterface) GrpcPipelinePartsContextValuesServiceClient {
	return &grpcPipelinePartsContextValuesServiceClient{cc}
}

func (c *grpcPipelinePartsContextValuesServiceClient) GetSubscriptionAndPipelinesState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcSubscriptionAndPipelinesStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcSubscriptionAndPipelinesStateResponse)
	err := c.cc.Invoke(ctx, GrpcPipelinePartsContextValuesService_GetSubscriptionAndPipelinesState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcPipelinePartsContextValuesServiceClient) GetPipelineCaseContextValue(ctx context.Context, in *GrpcGetPipelineCaseContextValuesRequest, opts ...grpc.CallOption) (*GrpcCaseContextValues, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcCaseContextValues)
	err := c.cc.Invoke(ctx, GrpcPipelinePartsContextValuesService_GetPipelineCaseContextValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcPipelinePartsContextValuesServiceServer is the server API for GrpcPipelinePartsContextValuesService service.
// All implementations must embed UnimplementedGrpcPipelinePartsContextValuesServiceServer
// for forward compatibility.
type GrpcPipelinePartsContextValuesServiceServer interface {
	GetSubscriptionAndPipelinesState(context.Context, *emptypb.Empty) (*GrpcSubscriptionAndPipelinesStateResponse, error)
	GetPipelineCaseContextValue(context.Context, *GrpcGetPipelineCaseContextValuesRequest) (*GrpcCaseContextValues, error)
	mustEmbedUnimplementedGrpcPipelinePartsContextValuesServiceServer()
}

// UnimplementedGrpcPipelinePartsContextValuesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcPipelinePartsContextValuesServiceServer struct{}

func (UnimplementedGrpcPipelinePartsContextValuesServiceServer) GetSubscriptionAndPipelinesState(context.Context, *emptypb.Empty) (*GrpcSubscriptionAndPipelinesStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionAndPipelinesState not implemented")
}
func (UnimplementedGrpcPipelinePartsContextValuesServiceServer) GetPipelineCaseContextValue(context.Context, *GrpcGetPipelineCaseContextValuesRequest) (*GrpcCaseContextValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineCaseContextValue not implemented")
}
func (UnimplementedGrpcPipelinePartsContextValuesServiceServer) mustEmbedUnimplementedGrpcPipelinePartsContextValuesServiceServer() {
}
func (UnimplementedGrpcPipelinePartsContextValuesServiceServer) testEmbeddedByValue() {}

// UnsafeGrpcPipelinePartsContextValuesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcPipelinePartsContextValuesServiceServer will
// result in compilation errors.
type UnsafeGrpcPipelinePartsContextValuesServiceServer interface {
	mustEmbedUnimplementedGrpcPipelinePartsContextValuesServiceServer()
}

func RegisterGrpcPipelinePartsContextValuesServiceServer(s grpc.ServiceRegistrar, srv GrpcPipelinePartsContextValuesServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcPipelinePartsContextValuesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcPipelinePartsContextValuesService_ServiceDesc, srv)
}

func _GrpcPipelinePartsContextValuesService_GetSubscriptionAndPipelinesState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcPipelinePartsContextValuesServiceServer).GetSubscriptionAndPipelinesState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcPipelinePartsContextValuesService_GetSubscriptionAndPipelinesState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcPipelinePartsContextValuesServiceServer).GetSubscriptionAndPipelinesState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcPipelinePartsContextValuesService_GetPipelineCaseContextValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcGetPipelineCaseContextValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcPipelinePartsContextValuesServiceServer).GetPipelineCaseContextValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcPipelinePartsContextValuesService_GetPipelineCaseContextValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcPipelinePartsContextValuesServiceServer).GetPipelineCaseContextValue(ctx, req.(*GrpcGetPipelineCaseContextValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcPipelinePartsContextValuesService_ServiceDesc is the grpc.ServiceDesc for GrpcPipelinePartsContextValuesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcPipelinePartsContextValuesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ficus.GrpcPipelinePartsContextValuesService",
	HandlerType: (*GrpcPipelinePartsContextValuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionAndPipelinesState",
			Handler:    _GrpcPipelinePartsContextValuesService_GetSubscriptionAndPipelinesState_Handler,
		},
		{
			MethodName: "GetPipelineCaseContextValue",
			Handler:    _GrpcPipelinePartsContextValuesService_GetPipelineCaseContextValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "front_contract.proto",
}
