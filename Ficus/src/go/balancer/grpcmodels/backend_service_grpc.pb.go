// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: backend_service.proto

package grpcmodels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcBackendService_ExecutePipeline_FullMethodName     = "/ficus.GrpcBackendService/ExecutePipeline"
	GrpcBackendService_GetContextValue_FullMethodName     = "/ficus.GrpcBackendService/GetContextValue"
	GrpcBackendService_GetAllContextValues_FullMethodName = "/ficus.GrpcBackendService/GetAllContextValues"
	GrpcBackendService_DropExecutionResult_FullMethodName = "/ficus.GrpcBackendService/DropExecutionResult"
	GrpcBackendService_GetBackendInfo_FullMethodName      = "/ficus.GrpcBackendService/GetBackendInfo"
)

// GrpcBackendServiceClient is the client API for GrpcBackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcBackendServiceClient interface {
	ExecutePipeline(ctx context.Context, in *GrpcProxyPipelineExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error)
	GetContextValue(ctx context.Context, in *GrpcGetContextValueRequest, opts ...grpc.CallOption) (*GrpcGetContextValueResult, error)
	GetAllContextValues(ctx context.Context, in *GrpcGuid, opts ...grpc.CallOption) (*GrpcGetAllContextValuesResult, error)
	DropExecutionResult(ctx context.Context, in *GrpcGuid, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBackendInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcFicusBackendInfo, error)
}

type grpcBackendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcBackendServiceClient(cc grpc.ClientConnInterface) GrpcBackendServiceClient {
	return &grpcBackendServiceClient{cc}
}

func (c *grpcBackendServiceClient) ExecutePipeline(ctx context.Context, in *GrpcProxyPipelineExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcBackendService_ServiceDesc.Streams[0], GrpcBackendService_ExecutePipeline_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GrpcProxyPipelineExecutionRequest, GrpcPipelinePartExecutionResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcBackendService_ExecutePipelineClient = grpc.ServerStreamingClient[GrpcPipelinePartExecutionResult]

func (c *grpcBackendServiceClient) GetContextValue(ctx context.Context, in *GrpcGetContextValueRequest, opts ...grpc.CallOption) (*GrpcGetContextValueResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcGetContextValueResult)
	err := c.cc.Invoke(ctx, GrpcBackendService_GetContextValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcBackendServiceClient) GetAllContextValues(ctx context.Context, in *GrpcGuid, opts ...grpc.CallOption) (*GrpcGetAllContextValuesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcGetAllContextValuesResult)
	err := c.cc.Invoke(ctx, GrpcBackendService_GetAllContextValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcBackendServiceClient) DropExecutionResult(ctx context.Context, in *GrpcGuid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GrpcBackendService_DropExecutionResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcBackendServiceClient) GetBackendInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcFicusBackendInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcFicusBackendInfo)
	err := c.cc.Invoke(ctx, GrpcBackendService_GetBackendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcBackendServiceServer is the server API for GrpcBackendService service.
// All implementations must embed UnimplementedGrpcBackendServiceServer
// for forward compatibility.
type GrpcBackendServiceServer interface {
	ExecutePipeline(*GrpcProxyPipelineExecutionRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error
	GetContextValue(context.Context, *GrpcGetContextValueRequest) (*GrpcGetContextValueResult, error)
	GetAllContextValues(context.Context, *GrpcGuid) (*GrpcGetAllContextValuesResult, error)
	DropExecutionResult(context.Context, *GrpcGuid) (*emptypb.Empty, error)
	GetBackendInfo(context.Context, *emptypb.Empty) (*GrpcFicusBackendInfo, error)
	mustEmbedUnimplementedGrpcBackendServiceServer()
}

// UnimplementedGrpcBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcBackendServiceServer struct{}

func (UnimplementedGrpcBackendServiceServer) ExecutePipeline(*GrpcProxyPipelineExecutionRequest, grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePipeline not implemented")
}
func (UnimplementedGrpcBackendServiceServer) GetContextValue(context.Context, *GrpcGetContextValueRequest) (*GrpcGetContextValueResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContextValue not implemented")
}
func (UnimplementedGrpcBackendServiceServer) GetAllContextValues(context.Context, *GrpcGuid) (*GrpcGetAllContextValuesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContextValues not implemented")
}
func (UnimplementedGrpcBackendServiceServer) DropExecutionResult(context.Context, *GrpcGuid) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropExecutionResult not implemented")
}
func (UnimplementedGrpcBackendServiceServer) GetBackendInfo(context.Context, *emptypb.Empty) (*GrpcFicusBackendInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendInfo not implemented")
}
func (UnimplementedGrpcBackendServiceServer) mustEmbedUnimplementedGrpcBackendServiceServer() {}
func (UnimplementedGrpcBackendServiceServer) testEmbeddedByValue()                            {}

// UnsafeGrpcBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcBackendServiceServer will
// result in compilation errors.
type UnsafeGrpcBackendServiceServer interface {
	mustEmbedUnimplementedGrpcBackendServiceServer()
}

func RegisterGrpcBackendServiceServer(s grpc.ServiceRegistrar, srv GrpcBackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcBackendService_ServiceDesc, srv)
}

func _GrpcBackendService_ExecutePipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcProxyPipelineExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcBackendServiceServer).ExecutePipeline(m, &grpc.GenericServerStream[GrpcProxyPipelineExecutionRequest, GrpcPipelinePartExecutionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcBackendService_ExecutePipelineServer = grpc.ServerStreamingServer[GrpcPipelinePartExecutionResult]

func _GrpcBackendService_GetContextValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcGetContextValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBackendServiceServer).GetContextValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcBackendService_GetContextValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBackendServiceServer).GetContextValue(ctx, req.(*GrpcGetContextValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcBackendService_GetAllContextValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcGuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBackendServiceServer).GetAllContextValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcBackendService_GetAllContextValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBackendServiceServer).GetAllContextValues(ctx, req.(*GrpcGuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcBackendService_DropExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcGuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBackendServiceServer).DropExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcBackendService_DropExecutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBackendServiceServer).DropExecutionResult(ctx, req.(*GrpcGuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcBackendService_GetBackendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBackendServiceServer).GetBackendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcBackendService_GetBackendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBackendServiceServer).GetBackendInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcBackendService_ServiceDesc is the grpc.ServiceDesc for GrpcBackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcBackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ficus.GrpcBackendService",
	HandlerType: (*GrpcBackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContextValue",
			Handler:    _GrpcBackendService_GetContextValue_Handler,
		},
		{
			MethodName: "GetAllContextValues",
			Handler:    _GrpcBackendService_GetAllContextValues_Handler,
		},
		{
			MethodName: "DropExecutionResult",
			Handler:    _GrpcBackendService_DropExecutionResult_Handler,
		},
		{
			MethodName: "GetBackendInfo",
			Handler:    _GrpcBackendService_GetBackendInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecutePipeline",
			Handler:       _GrpcBackendService_ExecutePipeline_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend_service.proto",
}
