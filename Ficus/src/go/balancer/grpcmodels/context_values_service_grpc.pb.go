// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: context_values_service.proto

package grpcmodels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcContextValuesService_SetContextValue_FullMethodName   = "/ficus.GrpcContextValuesService/SetContextValue"
	GrpcContextValuesService_DropContextValues_FullMethodName = "/ficus.GrpcContextValuesService/DropContextValues"
)

// GrpcContextValuesServiceClient is the client API for GrpcContextValuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcContextValuesServiceClient interface {
	SetContextValue(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GrpcContextValuePart, GrpcGuid], error)
	DropContextValues(ctx context.Context, in *GrpcDropContextValuesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type grpcContextValuesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcContextValuesServiceClient(cc grpc.ClientConnInterface) GrpcContextValuesServiceClient {
	return &grpcContextValuesServiceClient{cc}
}

func (c *grpcContextValuesServiceClient) SetContextValue(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GrpcContextValuePart, GrpcGuid], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcContextValuesService_ServiceDesc.Streams[0], GrpcContextValuesService_SetContextValue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GrpcContextValuePart, GrpcGuid]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcContextValuesService_SetContextValueClient = grpc.ClientStreamingClient[GrpcContextValuePart, GrpcGuid]

func (c *grpcContextValuesServiceClient) DropContextValues(ctx context.Context, in *GrpcDropContextValuesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GrpcContextValuesService_DropContextValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcContextValuesServiceServer is the server API for GrpcContextValuesService service.
// All implementations must embed UnimplementedGrpcContextValuesServiceServer
// for forward compatibility.
type GrpcContextValuesServiceServer interface {
	SetContextValue(grpc.ClientStreamingServer[GrpcContextValuePart, GrpcGuid]) error
	DropContextValues(context.Context, *GrpcDropContextValuesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGrpcContextValuesServiceServer()
}

// UnimplementedGrpcContextValuesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcContextValuesServiceServer struct{}

func (UnimplementedGrpcContextValuesServiceServer) SetContextValue(grpc.ClientStreamingServer[GrpcContextValuePart, GrpcGuid]) error {
	return status.Errorf(codes.Unimplemented, "method SetContextValue not implemented")
}
func (UnimplementedGrpcContextValuesServiceServer) DropContextValues(context.Context, *GrpcDropContextValuesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropContextValues not implemented")
}
func (UnimplementedGrpcContextValuesServiceServer) mustEmbedUnimplementedGrpcContextValuesServiceServer() {
}
func (UnimplementedGrpcContextValuesServiceServer) testEmbeddedByValue() {}

// UnsafeGrpcContextValuesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcContextValuesServiceServer will
// result in compilation errors.
type UnsafeGrpcContextValuesServiceServer interface {
	mustEmbedUnimplementedGrpcContextValuesServiceServer()
}

func RegisterGrpcContextValuesServiceServer(s grpc.ServiceRegistrar, srv GrpcContextValuesServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcContextValuesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcContextValuesService_ServiceDesc, srv)
}

func _GrpcContextValuesService_SetContextValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcContextValuesServiceServer).SetContextValue(&grpc.GenericServerStream[GrpcContextValuePart, GrpcGuid]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcContextValuesService_SetContextValueServer = grpc.ClientStreamingServer[GrpcContextValuePart, GrpcGuid]

func _GrpcContextValuesService_DropContextValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcDropContextValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcContextValuesServiceServer).DropContextValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcContextValuesService_DropContextValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcContextValuesServiceServer).DropContextValues(ctx, req.(*GrpcDropContextValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcContextValuesService_ServiceDesc is the grpc.ServiceDesc for GrpcContextValuesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcContextValuesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ficus.GrpcContextValuesService",
	HandlerType: (*GrpcContextValuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DropContextValues",
			Handler:    _GrpcContextValuesService_DropContextValues_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetContextValue",
			Handler:       _GrpcContextValuesService_SetContextValue_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "context_values_service.proto",
}
