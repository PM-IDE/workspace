// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: kafka_service.proto

package grpcmodels

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrpcExecutePipelineAndProduceKafkaRequest struct {
	state            protoimpl.MessageState             `protogen:"open.v1"`
	PipelineRequest  *GrpcProxyPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	ProducerMetadata *GrpcKafkaConnectionMetadata       `protobuf:"bytes,2,opt,name=producerMetadata,proto3" json:"producerMetadata,omitempty"`
	CaseInfo         *GrpcProcessInfo                   `protobuf:"bytes,3,opt,name=caseInfo,proto3" json:"caseInfo,omitempty"`
	SubscriptionId   *GrpcGuid                          `protobuf:"bytes,4,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineId       *GrpcGuid                          `protobuf:"bytes,5,opt,name=pipelineId,proto3" json:"pipelineId,omitempty"`
	PipelineName     string                             `protobuf:"bytes,6,opt,name=pipelineName,proto3" json:"pipelineName,omitempty"`
	SubscriptionName string                             `protobuf:"bytes,7,opt,name=subscriptionName,proto3" json:"subscriptionName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) Reset() {
	*x = GrpcExecutePipelineAndProduceKafkaRequest{}
	mi := &file_kafka_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcExecutePipelineAndProduceKafkaRequest) ProtoMessage() {}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcExecutePipelineAndProduceKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcExecutePipelineAndProduceKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{0}
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineRequest() *GrpcProxyPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetProducerMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ProducerMetadata
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetCaseInfo() *GrpcProcessInfo {
	if x != nil {
		return x.CaseInfo
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineId() *GrpcGuid {
	if x != nil {
		return x.PipelineId
	}
	return nil
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *GrpcExecutePipelineAndProduceKafkaRequest) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

type GrpcProcessInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessName   string                 `protobuf:"bytes,1,opt,name=processName,proto3" json:"processName,omitempty"`
	CaseName      string                 `protobuf:"bytes,2,opt,name=caseName,proto3" json:"caseName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcProcessInfo) Reset() {
	*x = GrpcProcessInfo{}
	mi := &file_kafka_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcProcessInfo) ProtoMessage() {}

func (x *GrpcProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcProcessInfo.ProtoReflect.Descriptor instead.
func (*GrpcProcessInfo) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{1}
}

func (x *GrpcProcessInfo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *GrpcProcessInfo) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

type GrpcSubscribeToKafkaRequest struct {
	state                protoimpl.MessageState         `protogen:"open.v1"`
	ConnectionMetadata   *GrpcKafkaConnectionMetadata   `protobuf:"bytes,1,opt,name=connectionMetadata,proto3" json:"connectionMetadata,omitempty"`
	SubscriptionMetadata *GrpcKafkaSubscriptionMetadata `protobuf:"bytes,2,opt,name=subscriptionMetadata,proto3" json:"subscriptionMetadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GrpcSubscribeToKafkaRequest) Reset() {
	*x = GrpcSubscribeToKafkaRequest{}
	mi := &file_kafka_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcSubscribeToKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSubscribeToKafkaRequest) ProtoMessage() {}

func (x *GrpcSubscribeToKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSubscribeToKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcSubscribeToKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcSubscribeToKafkaRequest) GetConnectionMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ConnectionMetadata
	}
	return nil
}

func (x *GrpcSubscribeToKafkaRequest) GetSubscriptionMetadata() *GrpcKafkaSubscriptionMetadata {
	if x != nil {
		return x.SubscriptionMetadata
	}
	return nil
}

type GrpcKafkaSubscriptionMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionName string                 `protobuf:"bytes,1,opt,name=subscriptionName,proto3" json:"subscriptionName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GrpcKafkaSubscriptionMetadata) Reset() {
	*x = GrpcKafkaSubscriptionMetadata{}
	mi := &file_kafka_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaSubscriptionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSubscriptionMetadata) ProtoMessage() {}

func (x *GrpcKafkaSubscriptionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSubscriptionMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSubscriptionMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{3}
}

func (x *GrpcKafkaSubscriptionMetadata) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

type GrpcKafkaPipelineExecutionRequest struct {
	state                  protoimpl.MessageState              `protogen:"open.v1"`
	SubscriptionId         *GrpcGuid                           `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineRequest        *GrpcPipelineExecutionRequest       `protobuf:"bytes,2,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	PipelineMetadata       *GrpcPipelineMetadata               `protobuf:"bytes,3,opt,name=pipelineMetadata,proto3" json:"pipelineMetadata,omitempty"`
	StreamingConfiguration *GrpcPipelineStreamingConfiguration `protobuf:"bytes,4,opt,name=streamingConfiguration,proto3" json:"streamingConfiguration,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GrpcKafkaPipelineExecutionRequest) Reset() {
	*x = GrpcKafkaPipelineExecutionRequest{}
	mi := &file_kafka_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaPipelineExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaPipelineExecutionRequest) ProtoMessage() {}

func (x *GrpcKafkaPipelineExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaPipelineExecutionRequest.ProtoReflect.Descriptor instead.
func (*GrpcKafkaPipelineExecutionRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcKafkaPipelineExecutionRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetPipelineRequest() *GrpcPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetPipelineMetadata() *GrpcPipelineMetadata {
	if x != nil {
		return x.PipelineMetadata
	}
	return nil
}

func (x *GrpcKafkaPipelineExecutionRequest) GetStreamingConfiguration() *GrpcPipelineStreamingConfiguration {
	if x != nil {
		return x.StreamingConfiguration
	}
	return nil
}

type GrpcPipelineMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcPipelineMetadata) Reset() {
	*x = GrpcPipelineMetadata{}
	mi := &file_kafka_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcPipelineMetadata) ProtoMessage() {}

func (x *GrpcPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcPipelineMetadata.ProtoReflect.Descriptor instead.
func (*GrpcPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{5}
}

func (x *GrpcPipelineMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GrpcAddPipelineRequest struct {
	state                 protoimpl.MessageState             `protogen:"open.v1"`
	PipelineRequest       *GrpcKafkaPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	ProducerKafkaMetadata *GrpcKafkaConnectionMetadata       `protobuf:"bytes,2,opt,name=producerKafkaMetadata,proto3" json:"producerKafkaMetadata,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GrpcAddPipelineRequest) Reset() {
	*x = GrpcAddPipelineRequest{}
	mi := &file_kafka_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcAddPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcAddPipelineRequest) ProtoMessage() {}

func (x *GrpcAddPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcAddPipelineRequest.ProtoReflect.Descriptor instead.
func (*GrpcAddPipelineRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{6}
}

func (x *GrpcAddPipelineRequest) GetPipelineRequest() *GrpcKafkaPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

func (x *GrpcAddPipelineRequest) GetProducerKafkaMetadata() *GrpcKafkaConnectionMetadata {
	if x != nil {
		return x.ProducerKafkaMetadata
	}
	return nil
}

type GrpcPipelineStreamingConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Configuration:
	//
	//	*GrpcPipelineStreamingConfiguration_NotSpecified
	//	*GrpcPipelineStreamingConfiguration_T1Configuration
	//	*GrpcPipelineStreamingConfiguration_T2Configuration
	Configuration isGrpcPipelineStreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcPipelineStreamingConfiguration) Reset() {
	*x = GrpcPipelineStreamingConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcPipelineStreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcPipelineStreamingConfiguration) ProtoMessage() {}

func (x *GrpcPipelineStreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcPipelineStreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcPipelineStreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{7}
}

func (x *GrpcPipelineStreamingConfiguration) GetConfiguration() isGrpcPipelineStreamingConfiguration_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetNotSpecified() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcPipelineStreamingConfiguration_NotSpecified); ok {
			return x.NotSpecified
		}
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetT1Configuration() *GrpcT1StreamingConfiguration {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcPipelineStreamingConfiguration_T1Configuration); ok {
			return x.T1Configuration
		}
	}
	return nil
}

func (x *GrpcPipelineStreamingConfiguration) GetT2Configuration() *GrpcT2StreamingConfiguration {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcPipelineStreamingConfiguration_T2Configuration); ok {
			return x.T2Configuration
		}
	}
	return nil
}

type isGrpcPipelineStreamingConfiguration_Configuration interface {
	isGrpcPipelineStreamingConfiguration_Configuration()
}

type GrpcPipelineStreamingConfiguration_NotSpecified struct {
	NotSpecified *emptypb.Empty `protobuf:"bytes,1,opt,name=notSpecified,proto3,oneof"`
}

type GrpcPipelineStreamingConfiguration_T1Configuration struct {
	T1Configuration *GrpcT1StreamingConfiguration `protobuf:"bytes,2,opt,name=t1Configuration,proto3,oneof"`
}

type GrpcPipelineStreamingConfiguration_T2Configuration struct {
	T2Configuration *GrpcT2StreamingConfiguration `protobuf:"bytes,3,opt,name=t2Configuration,proto3,oneof"`
}

func (*GrpcPipelineStreamingConfiguration_NotSpecified) isGrpcPipelineStreamingConfiguration_Configuration() {
}

func (*GrpcPipelineStreamingConfiguration_T1Configuration) isGrpcPipelineStreamingConfiguration_Configuration() {
}

func (*GrpcPipelineStreamingConfiguration_T2Configuration) isGrpcPipelineStreamingConfiguration_Configuration() {
}

type GrpcT1StreamingConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Configuration:
	//
	//	*GrpcT1StreamingConfiguration_EventsTimeout
	//	*GrpcT1StreamingConfiguration_TracesTimeout
	//	*GrpcT1StreamingConfiguration_TracesQueueConfiguration
	Configuration isGrpcT1StreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcT1StreamingConfiguration) Reset() {
	*x = GrpcT1StreamingConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT1StreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1StreamingConfiguration) ProtoMessage() {}

func (x *GrpcT1StreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1StreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT1StreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{8}
}

func (x *GrpcT1StreamingConfiguration) GetConfiguration() isGrpcT1StreamingConfiguration_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetEventsTimeout() *GrpcT1EventsTimeBasedCaching {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcT1StreamingConfiguration_EventsTimeout); ok {
			return x.EventsTimeout
		}
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetTracesTimeout() *GrpcT1TraceTimeBasedCaching {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcT1StreamingConfiguration_TracesTimeout); ok {
			return x.TracesTimeout
		}
	}
	return nil
}

func (x *GrpcT1StreamingConfiguration) GetTracesQueueConfiguration() *GrpcT1TracesQueueConfiguration {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcT1StreamingConfiguration_TracesQueueConfiguration); ok {
			return x.TracesQueueConfiguration
		}
	}
	return nil
}

type isGrpcT1StreamingConfiguration_Configuration interface {
	isGrpcT1StreamingConfiguration_Configuration()
}

type GrpcT1StreamingConfiguration_EventsTimeout struct {
	EventsTimeout *GrpcT1EventsTimeBasedCaching `protobuf:"bytes,1,opt,name=eventsTimeout,proto3,oneof"`
}

type GrpcT1StreamingConfiguration_TracesTimeout struct {
	TracesTimeout *GrpcT1TraceTimeBasedCaching `protobuf:"bytes,2,opt,name=tracesTimeout,proto3,oneof"`
}

type GrpcT1StreamingConfiguration_TracesQueueConfiguration struct {
	TracesQueueConfiguration *GrpcT1TracesQueueConfiguration `protobuf:"bytes,3,opt,name=tracesQueueConfiguration,proto3,oneof"`
}

func (*GrpcT1StreamingConfiguration_EventsTimeout) isGrpcT1StreamingConfiguration_Configuration() {}

func (*GrpcT1StreamingConfiguration_TracesTimeout) isGrpcT1StreamingConfiguration_Configuration() {}

func (*GrpcT1StreamingConfiguration_TracesQueueConfiguration) isGrpcT1StreamingConfiguration_Configuration() {
}

type GrpcT1TracesQueueConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueCapacity int64                  `protobuf:"varint,1,opt,name=queueCapacity,proto3" json:"queueCapacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcT1TracesQueueConfiguration) Reset() {
	*x = GrpcT1TracesQueueConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT1TracesQueueConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1TracesQueueConfiguration) ProtoMessage() {}

func (x *GrpcT1TracesQueueConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1TracesQueueConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT1TracesQueueConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{9}
}

func (x *GrpcT1TracesQueueConfiguration) GetQueueCapacity() int64 {
	if x != nil {
		return x.QueueCapacity
	}
	return 0
}

type GrpcT1EventsTimeBasedCaching struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventsTimeoutMs int64                  `protobuf:"varint,1,opt,name=eventsTimeoutMs,proto3" json:"eventsTimeoutMs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GrpcT1EventsTimeBasedCaching) Reset() {
	*x = GrpcT1EventsTimeBasedCaching{}
	mi := &file_kafka_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT1EventsTimeBasedCaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1EventsTimeBasedCaching) ProtoMessage() {}

func (x *GrpcT1EventsTimeBasedCaching) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1EventsTimeBasedCaching.ProtoReflect.Descriptor instead.
func (*GrpcT1EventsTimeBasedCaching) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{10}
}

func (x *GrpcT1EventsTimeBasedCaching) GetEventsTimeoutMs() int64 {
	if x != nil {
		return x.EventsTimeoutMs
	}
	return 0
}

type GrpcT1TraceTimeBasedCaching struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TracesTimeoutMs int64                  `protobuf:"varint,1,opt,name=tracesTimeoutMs,proto3" json:"tracesTimeoutMs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GrpcT1TraceTimeBasedCaching) Reset() {
	*x = GrpcT1TraceTimeBasedCaching{}
	mi := &file_kafka_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT1TraceTimeBasedCaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT1TraceTimeBasedCaching) ProtoMessage() {}

func (x *GrpcT1TraceTimeBasedCaching) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT1TraceTimeBasedCaching.ProtoReflect.Descriptor instead.
func (*GrpcT1TraceTimeBasedCaching) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{11}
}

func (x *GrpcT1TraceTimeBasedCaching) GetTracesTimeoutMs() int64 {
	if x != nil {
		return x.TracesTimeoutMs
	}
	return 0
}

type GrpcT2StreamingConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Configuration:
	//
	//	*GrpcT2StreamingConfiguration_LossyCount
	//	*GrpcT2StreamingConfiguration_TimedSlidingWindow
	Configuration                   isGrpcT2StreamingConfiguration_Configuration `protobuf_oneof:"configuration"`
	IncomingTracesFilteringPipeline *GrpcPipeline                                `protobuf:"bytes,3,opt,name=incomingTracesFilteringPipeline,proto3" json:"incomingTracesFilteringPipeline,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GrpcT2StreamingConfiguration) Reset() {
	*x = GrpcT2StreamingConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT2StreamingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2StreamingConfiguration) ProtoMessage() {}

func (x *GrpcT2StreamingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2StreamingConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2StreamingConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{12}
}

func (x *GrpcT2StreamingConfiguration) GetConfiguration() isGrpcT2StreamingConfiguration_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetLossyCount() *GrpcT2LossyCountConfiguration {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcT2StreamingConfiguration_LossyCount); ok {
			return x.LossyCount
		}
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetTimedSlidingWindow() *GrpcT2TimedSlidingWindowConfiguration {
	if x != nil {
		if x, ok := x.Configuration.(*GrpcT2StreamingConfiguration_TimedSlidingWindow); ok {
			return x.TimedSlidingWindow
		}
	}
	return nil
}

func (x *GrpcT2StreamingConfiguration) GetIncomingTracesFilteringPipeline() *GrpcPipeline {
	if x != nil {
		return x.IncomingTracesFilteringPipeline
	}
	return nil
}

type isGrpcT2StreamingConfiguration_Configuration interface {
	isGrpcT2StreamingConfiguration_Configuration()
}

type GrpcT2StreamingConfiguration_LossyCount struct {
	LossyCount *GrpcT2LossyCountConfiguration `protobuf:"bytes,1,opt,name=lossyCount,proto3,oneof"`
}

type GrpcT2StreamingConfiguration_TimedSlidingWindow struct {
	TimedSlidingWindow *GrpcT2TimedSlidingWindowConfiguration `protobuf:"bytes,2,opt,name=timedSlidingWindow,proto3,oneof"`
}

func (*GrpcT2StreamingConfiguration_LossyCount) isGrpcT2StreamingConfiguration_Configuration() {}

func (*GrpcT2StreamingConfiguration_TimedSlidingWindow) isGrpcT2StreamingConfiguration_Configuration() {
}

type GrpcT2LossyCountConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         float64                `protobuf:"fixed64,1,opt,name=error,proto3" json:"error,omitempty"`
	Support       float64                `protobuf:"fixed64,2,opt,name=support,proto3" json:"support,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcT2LossyCountConfiguration) Reset() {
	*x = GrpcT2LossyCountConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT2LossyCountConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2LossyCountConfiguration) ProtoMessage() {}

func (x *GrpcT2LossyCountConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2LossyCountConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2LossyCountConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{13}
}

func (x *GrpcT2LossyCountConfiguration) GetError() float64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GrpcT2LossyCountConfiguration) GetSupport() float64 {
	if x != nil {
		return x.Support
	}
	return 0
}

type GrpcT2TimedSlidingWindowConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LifespanMs    int64                  `protobuf:"varint,1,opt,name=lifespanMs,proto3" json:"lifespanMs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcT2TimedSlidingWindowConfiguration) Reset() {
	*x = GrpcT2TimedSlidingWindowConfiguration{}
	mi := &file_kafka_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcT2TimedSlidingWindowConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcT2TimedSlidingWindowConfiguration) ProtoMessage() {}

func (x *GrpcT2TimedSlidingWindowConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcT2TimedSlidingWindowConfiguration.ProtoReflect.Descriptor instead.
func (*GrpcT2TimedSlidingWindowConfiguration) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{14}
}

func (x *GrpcT2TimedSlidingWindowConfiguration) GetLifespanMs() int64 {
	if x != nil {
		return x.LifespanMs
	}
	return 0
}

type GrpcAddPipelineStreamRequest struct {
	state           protoimpl.MessageState             `protogen:"open.v1"`
	PipelineRequest *GrpcKafkaPipelineExecutionRequest `protobuf:"bytes,1,opt,name=pipelineRequest,proto3" json:"pipelineRequest,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GrpcAddPipelineStreamRequest) Reset() {
	*x = GrpcAddPipelineStreamRequest{}
	mi := &file_kafka_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcAddPipelineStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcAddPipelineStreamRequest) ProtoMessage() {}

func (x *GrpcAddPipelineStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcAddPipelineStreamRequest.ProtoReflect.Descriptor instead.
func (*GrpcAddPipelineStreamRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{15}
}

func (x *GrpcAddPipelineStreamRequest) GetPipelineRequest() *GrpcKafkaPipelineExecutionRequest {
	if x != nil {
		return x.PipelineRequest
	}
	return nil
}

type GrpcRemovePipelineRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId *GrpcGuid              `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	PipelineId     *GrpcGuid              `protobuf:"bytes,2,opt,name=pipelineId,proto3" json:"pipelineId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GrpcRemovePipelineRequest) Reset() {
	*x = GrpcRemovePipelineRequest{}
	mi := &file_kafka_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRemovePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRemovePipelineRequest) ProtoMessage() {}

func (x *GrpcRemovePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRemovePipelineRequest.ProtoReflect.Descriptor instead.
func (*GrpcRemovePipelineRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{16}
}

func (x *GrpcRemovePipelineRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *GrpcRemovePipelineRequest) GetPipelineId() *GrpcGuid {
	if x != nil {
		return x.PipelineId
	}
	return nil
}

type GrpcRemoveAllPipelinesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId *GrpcGuid              `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GrpcRemoveAllPipelinesRequest) Reset() {
	*x = GrpcRemoveAllPipelinesRequest{}
	mi := &file_kafka_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRemoveAllPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRemoveAllPipelinesRequest) ProtoMessage() {}

func (x *GrpcRemoveAllPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRemoveAllPipelinesRequest.ProtoReflect.Descriptor instead.
func (*GrpcRemoveAllPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{17}
}

func (x *GrpcRemoveAllPipelinesRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

type GrpcKafkaConnectionMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicName     string                 `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	Metadata      []*GrpcKafkaMetadata   `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaConnectionMetadata) Reset() {
	*x = GrpcKafkaConnectionMetadata{}
	mi := &file_kafka_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaConnectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaConnectionMetadata) ProtoMessage() {}

func (x *GrpcKafkaConnectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaConnectionMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaConnectionMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{18}
}

func (x *GrpcKafkaConnectionMetadata) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GrpcKafkaConnectionMetadata) GetMetadata() []*GrpcKafkaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GrpcKafkaMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaMetadata) Reset() {
	*x = GrpcKafkaMetadata{}
	mi := &file_kafka_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaMetadata) ProtoMessage() {}

func (x *GrpcKafkaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaMetadata.ProtoReflect.Descriptor instead.
func (*GrpcKafkaMetadata) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{19}
}

func (x *GrpcKafkaMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GrpcKafkaMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GrpcKafkaResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*GrpcKafkaResult_Success
	//	*GrpcKafkaResult_Failure
	Result        isGrpcKafkaResult_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaResult) Reset() {
	*x = GrpcKafkaResult{}
	mi := &file_kafka_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaResult) ProtoMessage() {}

func (x *GrpcKafkaResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{20}
}

func (x *GrpcKafkaResult) GetResult() isGrpcKafkaResult_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GrpcKafkaResult) GetSuccess() *GrpcKafkaSuccessResult {
	if x != nil {
		if x, ok := x.Result.(*GrpcKafkaResult_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GrpcKafkaResult) GetFailure() *GrpcKafkaFailedResult {
	if x != nil {
		if x, ok := x.Result.(*GrpcKafkaResult_Failure); ok {
			return x.Failure
		}
	}
	return nil
}

type isGrpcKafkaResult_Result interface {
	isGrpcKafkaResult_Result()
}

type GrpcKafkaResult_Success struct {
	Success *GrpcKafkaSuccessResult `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GrpcKafkaResult_Failure struct {
	Failure *GrpcKafkaFailedResult `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*GrpcKafkaResult_Success) isGrpcKafkaResult_Result() {}

func (*GrpcKafkaResult_Failure) isGrpcKafkaResult_Result() {}

type GrpcKafkaSuccessResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *GrpcGuid              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaSuccessResult) Reset() {
	*x = GrpcKafkaSuccessResult{}
	mi := &file_kafka_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaSuccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSuccessResult) ProtoMessage() {}

func (x *GrpcKafkaSuccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSuccessResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSuccessResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{21}
}

func (x *GrpcKafkaSuccessResult) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type GrpcKafkaFailedResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorMessage  string                 `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaFailedResult) Reset() {
	*x = GrpcKafkaFailedResult{}
	mi := &file_kafka_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaFailedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaFailedResult) ProtoMessage() {}

func (x *GrpcKafkaFailedResult) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaFailedResult.ProtoReflect.Descriptor instead.
func (*GrpcKafkaFailedResult) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{22}
}

func (x *GrpcKafkaFailedResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GrpcUnsubscribeFromKafkaRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId *GrpcGuid              `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GrpcUnsubscribeFromKafkaRequest) Reset() {
	*x = GrpcUnsubscribeFromKafkaRequest{}
	mi := &file_kafka_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcUnsubscribeFromKafkaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcUnsubscribeFromKafkaRequest) ProtoMessage() {}

func (x *GrpcUnsubscribeFromKafkaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcUnsubscribeFromKafkaRequest.ProtoReflect.Descriptor instead.
func (*GrpcUnsubscribeFromKafkaRequest) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{23}
}

func (x *GrpcUnsubscribeFromKafkaRequest) GetSubscriptionId() *GrpcGuid {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

type GrpcGetAllSubscriptionsAndPipelinesResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Subscriptions []*GrpcKafkaSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) Reset() {
	*x = GrpcGetAllSubscriptionsAndPipelinesResponse{}
	mi := &file_kafka_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcGetAllSubscriptionsAndPipelinesResponse) ProtoMessage() {}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcGetAllSubscriptionsAndPipelinesResponse.ProtoReflect.Descriptor instead.
func (*GrpcGetAllSubscriptionsAndPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{24}
}

func (x *GrpcGetAllSubscriptionsAndPipelinesResponse) GetSubscriptions() []*GrpcKafkaSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type GrpcKafkaSubscription struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Id            *GrpcGuid                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata      *GrpcKafkaSubscriptionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Pipelines     []*GrpcSubscriptionPipeline    `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcKafkaSubscription) Reset() {
	*x = GrpcKafkaSubscription{}
	mi := &file_kafka_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcKafkaSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKafkaSubscription) ProtoMessage() {}

func (x *GrpcKafkaSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKafkaSubscription.ProtoReflect.Descriptor instead.
func (*GrpcKafkaSubscription) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{25}
}

func (x *GrpcKafkaSubscription) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GrpcKafkaSubscription) GetMetadata() *GrpcKafkaSubscriptionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GrpcKafkaSubscription) GetPipelines() []*GrpcSubscriptionPipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type GrpcSubscriptionPipeline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *GrpcGuid              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata      *GrpcPipelineMetadata  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcSubscriptionPipeline) Reset() {
	*x = GrpcSubscriptionPipeline{}
	mi := &file_kafka_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcSubscriptionPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSubscriptionPipeline) ProtoMessage() {}

func (x *GrpcSubscriptionPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSubscriptionPipeline.ProtoReflect.Descriptor instead.
func (*GrpcSubscriptionPipeline) Descriptor() ([]byte, []int) {
	return file_kafka_service_proto_rawDescGZIP(), []int{26}
}

func (x *GrpcSubscriptionPipeline) GetId() *GrpcGuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GrpcSubscriptionPipeline) GetMetadata() *GrpcPipelineMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_kafka_service_proto protoreflect.FileDescriptor

const file_kafka_service_proto_rawDesc = "" +
	"\n" +
	"\x13kafka_service.proto\x12\x05ficus\x1a\x1bpipelines_and_context.proto\x1a\n" +
	"util.proto\x1a\x15backend_service.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xbd\x03\n" +
	")GrpcExecutePipelineAndProduceKafkaRequest\x12R\n" +
	"\x0fpipelineRequest\x18\x01 \x01(\v2(.ficus.GrpcProxyPipelineExecutionRequestR\x0fpipelineRequest\x12N\n" +
	"\x10producerMetadata\x18\x02 \x01(\v2\".ficus.GrpcKafkaConnectionMetadataR\x10producerMetadata\x122\n" +
	"\bcaseInfo\x18\x03 \x01(\v2\x16.ficus.GrpcProcessInfoR\bcaseInfo\x127\n" +
	"\x0esubscriptionId\x18\x04 \x01(\v2\x0f.ficus.GrpcGuidR\x0esubscriptionId\x12/\n" +
	"\n" +
	"pipelineId\x18\x05 \x01(\v2\x0f.ficus.GrpcGuidR\n" +
	"pipelineId\x12\"\n" +
	"\fpipelineName\x18\x06 \x01(\tR\fpipelineName\x12*\n" +
	"\x10subscriptionName\x18\a \x01(\tR\x10subscriptionName\"O\n" +
	"\x0fGrpcProcessInfo\x12 \n" +
	"\vprocessName\x18\x01 \x01(\tR\vprocessName\x12\x1a\n" +
	"\bcaseName\x18\x02 \x01(\tR\bcaseName\"\xcb\x01\n" +
	"\x1bGrpcSubscribeToKafkaRequest\x12R\n" +
	"\x12connectionMetadata\x18\x01 \x01(\v2\".ficus.GrpcKafkaConnectionMetadataR\x12connectionMetadata\x12X\n" +
	"\x14subscriptionMetadata\x18\x02 \x01(\v2$.ficus.GrpcKafkaSubscriptionMetadataR\x14subscriptionMetadata\"K\n" +
	"\x1dGrpcKafkaSubscriptionMetadata\x12*\n" +
	"\x10subscriptionName\x18\x01 \x01(\tR\x10subscriptionName\"\xd7\x02\n" +
	"!GrpcKafkaPipelineExecutionRequest\x127\n" +
	"\x0esubscriptionId\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x0esubscriptionId\x12M\n" +
	"\x0fpipelineRequest\x18\x02 \x01(\v2#.ficus.GrpcPipelineExecutionRequestR\x0fpipelineRequest\x12G\n" +
	"\x10pipelineMetadata\x18\x03 \x01(\v2\x1b.ficus.GrpcPipelineMetadataR\x10pipelineMetadata\x12a\n" +
	"\x16streamingConfiguration\x18\x04 \x01(\v2).ficus.GrpcPipelineStreamingConfigurationR\x16streamingConfiguration\"*\n" +
	"\x14GrpcPipelineMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\xc6\x01\n" +
	"\x16GrpcAddPipelineRequest\x12R\n" +
	"\x0fpipelineRequest\x18\x01 \x01(\v2(.ficus.GrpcKafkaPipelineExecutionRequestR\x0fpipelineRequest\x12X\n" +
	"\x15producerKafkaMetadata\x18\x02 \x01(\v2\".ficus.GrpcKafkaConnectionMetadataR\x15producerKafkaMetadata\"\x95\x02\n" +
	"\"GrpcPipelineStreamingConfiguration\x12<\n" +
	"\fnotSpecified\x18\x01 \x01(\v2\x16.google.protobuf.EmptyH\x00R\fnotSpecified\x12O\n" +
	"\x0ft1Configuration\x18\x02 \x01(\v2#.ficus.GrpcT1StreamingConfigurationH\x00R\x0ft1Configuration\x12O\n" +
	"\x0ft2Configuration\x18\x03 \x01(\v2#.ficus.GrpcT2StreamingConfigurationH\x00R\x0ft2ConfigurationB\x0f\n" +
	"\rconfiguration\"\xad\x02\n" +
	"\x1cGrpcT1StreamingConfiguration\x12K\n" +
	"\reventsTimeout\x18\x01 \x01(\v2#.ficus.GrpcT1EventsTimeBasedCachingH\x00R\reventsTimeout\x12J\n" +
	"\rtracesTimeout\x18\x02 \x01(\v2\".ficus.GrpcT1TraceTimeBasedCachingH\x00R\rtracesTimeout\x12c\n" +
	"\x18tracesQueueConfiguration\x18\x03 \x01(\v2%.ficus.GrpcT1TracesQueueConfigurationH\x00R\x18tracesQueueConfigurationB\x0f\n" +
	"\rconfiguration\"F\n" +
	"\x1eGrpcT1TracesQueueConfiguration\x12$\n" +
	"\rqueueCapacity\x18\x01 \x01(\x03R\rqueueCapacity\"H\n" +
	"\x1cGrpcT1EventsTimeBasedCaching\x12(\n" +
	"\x0feventsTimeoutMs\x18\x01 \x01(\x03R\x0feventsTimeoutMs\"G\n" +
	"\x1bGrpcT1TraceTimeBasedCaching\x12(\n" +
	"\x0ftracesTimeoutMs\x18\x01 \x01(\x03R\x0ftracesTimeoutMs\"\xb6\x02\n" +
	"\x1cGrpcT2StreamingConfiguration\x12F\n" +
	"\n" +
	"lossyCount\x18\x01 \x01(\v2$.ficus.GrpcT2LossyCountConfigurationH\x00R\n" +
	"lossyCount\x12^\n" +
	"\x12timedSlidingWindow\x18\x02 \x01(\v2,.ficus.GrpcT2TimedSlidingWindowConfigurationH\x00R\x12timedSlidingWindow\x12]\n" +
	"\x1fincomingTracesFilteringPipeline\x18\x03 \x01(\v2\x13.ficus.GrpcPipelineR\x1fincomingTracesFilteringPipelineB\x0f\n" +
	"\rconfiguration\"O\n" +
	"\x1dGrpcT2LossyCountConfiguration\x12\x14\n" +
	"\x05error\x18\x01 \x01(\x01R\x05error\x12\x18\n" +
	"\asupport\x18\x02 \x01(\x01R\asupport\"G\n" +
	"%GrpcT2TimedSlidingWindowConfiguration\x12\x1e\n" +
	"\n" +
	"lifespanMs\x18\x01 \x01(\x03R\n" +
	"lifespanMs\"r\n" +
	"\x1cGrpcAddPipelineStreamRequest\x12R\n" +
	"\x0fpipelineRequest\x18\x01 \x01(\v2(.ficus.GrpcKafkaPipelineExecutionRequestR\x0fpipelineRequest\"\x85\x01\n" +
	"\x19GrpcRemovePipelineRequest\x127\n" +
	"\x0esubscriptionId\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x0esubscriptionId\x12/\n" +
	"\n" +
	"pipelineId\x18\x02 \x01(\v2\x0f.ficus.GrpcGuidR\n" +
	"pipelineId\"X\n" +
	"\x1dGrpcRemoveAllPipelinesRequest\x127\n" +
	"\x0esubscriptionId\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x0esubscriptionId\"q\n" +
	"\x1bGrpcKafkaConnectionMetadata\x12\x1c\n" +
	"\ttopicName\x18\x01 \x01(\tR\ttopicName\x124\n" +
	"\bmetadata\x18\x02 \x03(\v2\x18.ficus.GrpcKafkaMetadataR\bmetadata\";\n" +
	"\x11GrpcKafkaMetadata\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x90\x01\n" +
	"\x0fGrpcKafkaResult\x129\n" +
	"\asuccess\x18\x01 \x01(\v2\x1d.ficus.GrpcKafkaSuccessResultH\x00R\asuccess\x128\n" +
	"\afailure\x18\x02 \x01(\v2\x1c.ficus.GrpcKafkaFailedResultH\x00R\afailureB\b\n" +
	"\x06result\"9\n" +
	"\x16GrpcKafkaSuccessResult\x12\x1f\n" +
	"\x02id\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x02id\";\n" +
	"\x15GrpcKafkaFailedResult\x12\"\n" +
	"\ferrorMessage\x18\x01 \x01(\tR\ferrorMessage\"Z\n" +
	"\x1fGrpcUnsubscribeFromKafkaRequest\x127\n" +
	"\x0esubscriptionId\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x0esubscriptionId\"q\n" +
	"+GrpcGetAllSubscriptionsAndPipelinesResponse\x12B\n" +
	"\rsubscriptions\x18\x01 \x03(\v2\x1c.ficus.GrpcKafkaSubscriptionR\rsubscriptions\"\xb9\x01\n" +
	"\x15GrpcKafkaSubscription\x12\x1f\n" +
	"\x02id\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x02id\x12@\n" +
	"\bmetadata\x18\x02 \x01(\v2$.ficus.GrpcKafkaSubscriptionMetadataR\bmetadata\x12=\n" +
	"\tpipelines\x18\x03 \x03(\v2\x1f.ficus.GrpcSubscriptionPipelineR\tpipelines\"t\n" +
	"\x18GrpcSubscriptionPipeline\x12\x1f\n" +
	"\x02id\x18\x01 \x01(\v2\x0f.ficus.GrpcGuidR\x02id\x127\n" +
	"\bmetadata\x18\x02 \x01(\v2\x1b.ficus.GrpcPipelineMetadataR\bmetadata2\xb2\x06\n" +
	"\x10GrpcKafkaService\x12T\n" +
	"\x16SubscribeForKafkaTopic\x12\".ficus.GrpcSubscribeToKafkaRequest\x1a\x16.ficus.GrpcKafkaResult\x12[\n" +
	"\x19UnsubscribeFromKafkaTopic\x12&.ficus.GrpcUnsubscribeFromKafkaRequest\x1a\x16.ficus.GrpcKafkaResult\x12R\n" +
	"\x19AddPipelineToSubscription\x12\x1d.ficus.GrpcAddPipelineRequest\x1a\x16.ficus.GrpcKafkaResult\x12p\n" +
	"\x1fAddPipelineToSubscriptionStream\x12#.ficus.GrpcAddPipelineStreamRequest\x1a&.ficus.GrpcPipelinePartExecutionResult0\x01\x12V\n" +
	"\x1aRemovePipelineSubscription\x12 .ficus.GrpcRemovePipelineRequest\x1a\x16.ficus.GrpcKafkaResult\x12^\n" +
	"\x1eRemoveAllPipelineSubscriptions\x12$.ficus.GrpcRemoveAllPipelinesRequest\x1a\x16.ficus.GrpcKafkaResult\x12m\n" +
	"\x1fGetAllSubscriptionsAndPipelines\x12\x16.google.protobuf.Empty\x1a2.ficus.GrpcGetAllSubscriptionsAndPipelinesResponse\x12~\n" +
	" ExecutePipelineAndProduceToKafka\x120.ficus.GrpcExecutePipelineAndProduceKafkaRequest\x1a&.ficus.GrpcPipelinePartExecutionResult0\x01B\x0fZ\r./;grpcmodelsb\x06proto3"

var (
	file_kafka_service_proto_rawDescOnce sync.Once
	file_kafka_service_proto_rawDescData []byte
)

func file_kafka_service_proto_rawDescGZIP() []byte {
	file_kafka_service_proto_rawDescOnce.Do(func() {
		file_kafka_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kafka_service_proto_rawDesc), len(file_kafka_service_proto_rawDesc)))
	})
	return file_kafka_service_proto_rawDescData
}

var file_kafka_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_kafka_service_proto_goTypes = []any{
	(*GrpcExecutePipelineAndProduceKafkaRequest)(nil),   // 0: ficus.GrpcExecutePipelineAndProduceKafkaRequest
	(*GrpcProcessInfo)(nil),                             // 1: ficus.GrpcProcessInfo
	(*GrpcSubscribeToKafkaRequest)(nil),                 // 2: ficus.GrpcSubscribeToKafkaRequest
	(*GrpcKafkaSubscriptionMetadata)(nil),               // 3: ficus.GrpcKafkaSubscriptionMetadata
	(*GrpcKafkaPipelineExecutionRequest)(nil),           // 4: ficus.GrpcKafkaPipelineExecutionRequest
	(*GrpcPipelineMetadata)(nil),                        // 5: ficus.GrpcPipelineMetadata
	(*GrpcAddPipelineRequest)(nil),                      // 6: ficus.GrpcAddPipelineRequest
	(*GrpcPipelineStreamingConfiguration)(nil),          // 7: ficus.GrpcPipelineStreamingConfiguration
	(*GrpcT1StreamingConfiguration)(nil),                // 8: ficus.GrpcT1StreamingConfiguration
	(*GrpcT1TracesQueueConfiguration)(nil),              // 9: ficus.GrpcT1TracesQueueConfiguration
	(*GrpcT1EventsTimeBasedCaching)(nil),                // 10: ficus.GrpcT1EventsTimeBasedCaching
	(*GrpcT1TraceTimeBasedCaching)(nil),                 // 11: ficus.GrpcT1TraceTimeBasedCaching
	(*GrpcT2StreamingConfiguration)(nil),                // 12: ficus.GrpcT2StreamingConfiguration
	(*GrpcT2LossyCountConfiguration)(nil),               // 13: ficus.GrpcT2LossyCountConfiguration
	(*GrpcT2TimedSlidingWindowConfiguration)(nil),       // 14: ficus.GrpcT2TimedSlidingWindowConfiguration
	(*GrpcAddPipelineStreamRequest)(nil),                // 15: ficus.GrpcAddPipelineStreamRequest
	(*GrpcRemovePipelineRequest)(nil),                   // 16: ficus.GrpcRemovePipelineRequest
	(*GrpcRemoveAllPipelinesRequest)(nil),               // 17: ficus.GrpcRemoveAllPipelinesRequest
	(*GrpcKafkaConnectionMetadata)(nil),                 // 18: ficus.GrpcKafkaConnectionMetadata
	(*GrpcKafkaMetadata)(nil),                           // 19: ficus.GrpcKafkaMetadata
	(*GrpcKafkaResult)(nil),                             // 20: ficus.GrpcKafkaResult
	(*GrpcKafkaSuccessResult)(nil),                      // 21: ficus.GrpcKafkaSuccessResult
	(*GrpcKafkaFailedResult)(nil),                       // 22: ficus.GrpcKafkaFailedResult
	(*GrpcUnsubscribeFromKafkaRequest)(nil),             // 23: ficus.GrpcUnsubscribeFromKafkaRequest
	(*GrpcGetAllSubscriptionsAndPipelinesResponse)(nil), // 24: ficus.GrpcGetAllSubscriptionsAndPipelinesResponse
	(*GrpcKafkaSubscription)(nil),                       // 25: ficus.GrpcKafkaSubscription
	(*GrpcSubscriptionPipeline)(nil),                    // 26: ficus.GrpcSubscriptionPipeline
	(*GrpcProxyPipelineExecutionRequest)(nil),           // 27: ficus.GrpcProxyPipelineExecutionRequest
	(*GrpcGuid)(nil),                                    // 28: ficus.GrpcGuid
	(*GrpcPipelineExecutionRequest)(nil),                // 29: ficus.GrpcPipelineExecutionRequest
	(*emptypb.Empty)(nil),                               // 30: google.protobuf.Empty
	(*GrpcPipeline)(nil),                                // 31: ficus.GrpcPipeline
	(*GrpcPipelinePartExecutionResult)(nil),             // 32: ficus.GrpcPipelinePartExecutionResult
}
var file_kafka_service_proto_depIdxs = []int32{
	27, // 0: ficus.GrpcExecutePipelineAndProduceKafkaRequest.pipelineRequest:type_name -> ficus.GrpcProxyPipelineExecutionRequest
	18, // 1: ficus.GrpcExecutePipelineAndProduceKafkaRequest.producerMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	1,  // 2: ficus.GrpcExecutePipelineAndProduceKafkaRequest.caseInfo:type_name -> ficus.GrpcProcessInfo
	28, // 3: ficus.GrpcExecutePipelineAndProduceKafkaRequest.subscriptionId:type_name -> ficus.GrpcGuid
	28, // 4: ficus.GrpcExecutePipelineAndProduceKafkaRequest.pipelineId:type_name -> ficus.GrpcGuid
	18, // 5: ficus.GrpcSubscribeToKafkaRequest.connectionMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	3,  // 6: ficus.GrpcSubscribeToKafkaRequest.subscriptionMetadata:type_name -> ficus.GrpcKafkaSubscriptionMetadata
	28, // 7: ficus.GrpcKafkaPipelineExecutionRequest.subscriptionId:type_name -> ficus.GrpcGuid
	29, // 8: ficus.GrpcKafkaPipelineExecutionRequest.pipelineRequest:type_name -> ficus.GrpcPipelineExecutionRequest
	5,  // 9: ficus.GrpcKafkaPipelineExecutionRequest.pipelineMetadata:type_name -> ficus.GrpcPipelineMetadata
	7,  // 10: ficus.GrpcKafkaPipelineExecutionRequest.streamingConfiguration:type_name -> ficus.GrpcPipelineStreamingConfiguration
	4,  // 11: ficus.GrpcAddPipelineRequest.pipelineRequest:type_name -> ficus.GrpcKafkaPipelineExecutionRequest
	18, // 12: ficus.GrpcAddPipelineRequest.producerKafkaMetadata:type_name -> ficus.GrpcKafkaConnectionMetadata
	30, // 13: ficus.GrpcPipelineStreamingConfiguration.notSpecified:type_name -> google.protobuf.Empty
	8,  // 14: ficus.GrpcPipelineStreamingConfiguration.t1Configuration:type_name -> ficus.GrpcT1StreamingConfiguration
	12, // 15: ficus.GrpcPipelineStreamingConfiguration.t2Configuration:type_name -> ficus.GrpcT2StreamingConfiguration
	10, // 16: ficus.GrpcT1StreamingConfiguration.eventsTimeout:type_name -> ficus.GrpcT1EventsTimeBasedCaching
	11, // 17: ficus.GrpcT1StreamingConfiguration.tracesTimeout:type_name -> ficus.GrpcT1TraceTimeBasedCaching
	9,  // 18: ficus.GrpcT1StreamingConfiguration.tracesQueueConfiguration:type_name -> ficus.GrpcT1TracesQueueConfiguration
	13, // 19: ficus.GrpcT2StreamingConfiguration.lossyCount:type_name -> ficus.GrpcT2LossyCountConfiguration
	14, // 20: ficus.GrpcT2StreamingConfiguration.timedSlidingWindow:type_name -> ficus.GrpcT2TimedSlidingWindowConfiguration
	31, // 21: ficus.GrpcT2StreamingConfiguration.incomingTracesFilteringPipeline:type_name -> ficus.GrpcPipeline
	4,  // 22: ficus.GrpcAddPipelineStreamRequest.pipelineRequest:type_name -> ficus.GrpcKafkaPipelineExecutionRequest
	28, // 23: ficus.GrpcRemovePipelineRequest.subscriptionId:type_name -> ficus.GrpcGuid
	28, // 24: ficus.GrpcRemovePipelineRequest.pipelineId:type_name -> ficus.GrpcGuid
	28, // 25: ficus.GrpcRemoveAllPipelinesRequest.subscriptionId:type_name -> ficus.GrpcGuid
	19, // 26: ficus.GrpcKafkaConnectionMetadata.metadata:type_name -> ficus.GrpcKafkaMetadata
	21, // 27: ficus.GrpcKafkaResult.success:type_name -> ficus.GrpcKafkaSuccessResult
	22, // 28: ficus.GrpcKafkaResult.failure:type_name -> ficus.GrpcKafkaFailedResult
	28, // 29: ficus.GrpcKafkaSuccessResult.id:type_name -> ficus.GrpcGuid
	28, // 30: ficus.GrpcUnsubscribeFromKafkaRequest.subscriptionId:type_name -> ficus.GrpcGuid
	25, // 31: ficus.GrpcGetAllSubscriptionsAndPipelinesResponse.subscriptions:type_name -> ficus.GrpcKafkaSubscription
	28, // 32: ficus.GrpcKafkaSubscription.id:type_name -> ficus.GrpcGuid
	3,  // 33: ficus.GrpcKafkaSubscription.metadata:type_name -> ficus.GrpcKafkaSubscriptionMetadata
	26, // 34: ficus.GrpcKafkaSubscription.pipelines:type_name -> ficus.GrpcSubscriptionPipeline
	28, // 35: ficus.GrpcSubscriptionPipeline.id:type_name -> ficus.GrpcGuid
	5,  // 36: ficus.GrpcSubscriptionPipeline.metadata:type_name -> ficus.GrpcPipelineMetadata
	2,  // 37: ficus.GrpcKafkaService.SubscribeForKafkaTopic:input_type -> ficus.GrpcSubscribeToKafkaRequest
	23, // 38: ficus.GrpcKafkaService.UnsubscribeFromKafkaTopic:input_type -> ficus.GrpcUnsubscribeFromKafkaRequest
	6,  // 39: ficus.GrpcKafkaService.AddPipelineToSubscription:input_type -> ficus.GrpcAddPipelineRequest
	15, // 40: ficus.GrpcKafkaService.AddPipelineToSubscriptionStream:input_type -> ficus.GrpcAddPipelineStreamRequest
	16, // 41: ficus.GrpcKafkaService.RemovePipelineSubscription:input_type -> ficus.GrpcRemovePipelineRequest
	17, // 42: ficus.GrpcKafkaService.RemoveAllPipelineSubscriptions:input_type -> ficus.GrpcRemoveAllPipelinesRequest
	30, // 43: ficus.GrpcKafkaService.GetAllSubscriptionsAndPipelines:input_type -> google.protobuf.Empty
	0,  // 44: ficus.GrpcKafkaService.ExecutePipelineAndProduceToKafka:input_type -> ficus.GrpcExecutePipelineAndProduceKafkaRequest
	20, // 45: ficus.GrpcKafkaService.SubscribeForKafkaTopic:output_type -> ficus.GrpcKafkaResult
	20, // 46: ficus.GrpcKafkaService.UnsubscribeFromKafkaTopic:output_type -> ficus.GrpcKafkaResult
	20, // 47: ficus.GrpcKafkaService.AddPipelineToSubscription:output_type -> ficus.GrpcKafkaResult
	32, // 48: ficus.GrpcKafkaService.AddPipelineToSubscriptionStream:output_type -> ficus.GrpcPipelinePartExecutionResult
	20, // 49: ficus.GrpcKafkaService.RemovePipelineSubscription:output_type -> ficus.GrpcKafkaResult
	20, // 50: ficus.GrpcKafkaService.RemoveAllPipelineSubscriptions:output_type -> ficus.GrpcKafkaResult
	24, // 51: ficus.GrpcKafkaService.GetAllSubscriptionsAndPipelines:output_type -> ficus.GrpcGetAllSubscriptionsAndPipelinesResponse
	32, // 52: ficus.GrpcKafkaService.ExecutePipelineAndProduceToKafka:output_type -> ficus.GrpcPipelinePartExecutionResult
	45, // [45:53] is the sub-list for method output_type
	37, // [37:45] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_kafka_service_proto_init() }
func file_kafka_service_proto_init() {
	if File_kafka_service_proto != nil {
		return
	}
	file_pipelines_and_context_proto_init()
	file_util_proto_init()
	file_backend_service_proto_init()
	file_kafka_service_proto_msgTypes[7].OneofWrappers = []any{
		(*GrpcPipelineStreamingConfiguration_NotSpecified)(nil),
		(*GrpcPipelineStreamingConfiguration_T1Configuration)(nil),
		(*GrpcPipelineStreamingConfiguration_T2Configuration)(nil),
	}
	file_kafka_service_proto_msgTypes[8].OneofWrappers = []any{
		(*GrpcT1StreamingConfiguration_EventsTimeout)(nil),
		(*GrpcT1StreamingConfiguration_TracesTimeout)(nil),
		(*GrpcT1StreamingConfiguration_TracesQueueConfiguration)(nil),
	}
	file_kafka_service_proto_msgTypes[12].OneofWrappers = []any{
		(*GrpcT2StreamingConfiguration_LossyCount)(nil),
		(*GrpcT2StreamingConfiguration_TimedSlidingWindow)(nil),
	}
	file_kafka_service_proto_msgTypes[20].OneofWrappers = []any{
		(*GrpcKafkaResult_Success)(nil),
		(*GrpcKafkaResult_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kafka_service_proto_rawDesc), len(file_kafka_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kafka_service_proto_goTypes,
		DependencyIndexes: file_kafka_service_proto_depIdxs,
		MessageInfos:      file_kafka_service_proto_msgTypes,
	}.Build()
	File_kafka_service_proto = out.File
	file_kafka_service_proto_goTypes = nil
	file_kafka_service_proto_depIdxs = nil
}
