syntax = "proto3";

import "pipelines_and_context.proto";
import "util.proto";
import "backend_service.proto";
import "google/protobuf/empty.proto";

package ficus;

service GrpcKafkaService {
  rpc SubscribeForKafkaTopic(GrpcSubscribeToKafkaRequest) returns (GrpcKafkaResult);
  rpc UnsubscribeFromKafkaTopic(GrpcUnsubscribeFromKafkaRequest) returns (GrpcKafkaResult);
  
  rpc AddPipelineToSubscription(GrpcAddPipelineRequest) returns (GrpcKafkaResult);
  rpc AddPipelineToSubscriptionStream(GrpcAddPipelineStreamRequest) returns (stream GrpcPipelinePartExecutionResult);

  rpc RemovePipelineSubscription(GrpcRemovePipelineRequest) returns (GrpcKafkaResult);
  rpc RemoveAllPipelineSubscriptions(GrpcRemoveAllPipelinesRequest) returns (GrpcKafkaResult);
  
  rpc GetAllSubscriptionsAndPipelines(google.protobuf.Empty) returns (GrpcGetAllSubscriptionsAndPipelinesResponse);

  rpc ExecutePipelineAndProduceToKafka(GrpcExecutePipelineAndProduceKafkaRequest) returns (stream GrpcPipelinePartExecutionResult);
}

message GrpcExecutePipelineAndProduceKafkaRequest {
  GrpcProxyPipelineExecutionRequest pipelineRequest = 1;
  GrpcKafkaConnectionMetadata producerMetadata = 2;
  GrpcProcessInfo caseInfo = 3;
}

message GrpcProcessInfo {
  string processName = 1;
  string caseName = 2;
}

message GrpcSubscribeToKafkaRequest {
  GrpcKafkaConnectionMetadata connectionMetadata = 1;
  GrpcKafkaSubscriptionMetadata subscriptionMetadata = 2;
}

message GrpcKafkaSubscriptionMetadata {
  string subscriptionName = 1;
}

message GrpcKafkaPipelineExecutionRequest {
  GrpcGuid subscriptionId = 1;
  GrpcPipelineExecutionRequest pipelineRequest = 2;
  GrpcPipelineMetadata pipelineMetadata = 3;
  GrpcPipelineStreamingConfiguration streamingConfiguration = 4;
}

message GrpcPipelineMetadata {
  string name = 1;
}

message GrpcAddPipelineRequest {
  GrpcKafkaPipelineExecutionRequest pipelineRequest = 1;
  GrpcKafkaConnectionMetadata producerKafkaMetadata = 2;
}

message GrpcPipelineStreamingConfiguration {
  oneof configuration {
    google.protobuf.Empty notSpecified = 1;
    GrpcT1StreamingConfiguration t1Configuration = 2;
    GrpcT2StreamingConfiguration t2Configuration = 3;
  }
}

message GrpcT1StreamingConfiguration {
  oneof configuration {
    GrpcT1EventsTimeBasedCaching eventsTimeout = 1;
    GrpcT1TraceTimeBasedCaching tracesTimeout = 2;
  }
}

message GrpcT1EventsTimeBasedCaching {
  int64 eventsTimeoutMs = 1;
}

message GrpcT1TraceTimeBasedCaching {
  int64 tracesTimeoutMs = 1;
}

message GrpcT2StreamingConfiguration {
  oneof configuration {
    GrpcT2LossyCountConfiguration lossyCount = 1;
  }
}

message GrpcT2LossyCountConfiguration {
  double error = 1;
  double support = 2;
}

message GrpcAddPipelineStreamRequest {
  GrpcKafkaPipelineExecutionRequest pipelineRequest = 1;
}

message GrpcRemovePipelineRequest {
  GrpcGuid subscriptionId = 1;
  GrpcGuid pipelineId = 2;
}

message GrpcRemoveAllPipelinesRequest {
  GrpcGuid subscriptionId = 1;
}

message GrpcKafkaConnectionMetadata {
  string topicName = 1;
  repeated GrpcKafkaMetadata metadata = 2;
}

message GrpcKafkaMetadata {
  string key = 1;
  string value = 2;
}

message GrpcKafkaResult {
  oneof result {
    GrpcKafkaSuccessResult success = 1;
    GrpcKafkaFailedResult failure = 2;
  }
}

message GrpcKafkaSuccessResult {
  GrpcGuid id = 1;
}

message GrpcKafkaFailedResult {
  string errorMessage = 1;
}

message GrpcUnsubscribeFromKafkaRequest {
  GrpcGuid subscriptionId = 1;
}

message GrpcGetAllSubscriptionsAndPipelinesResponse {
  repeated GrpcKafkaSubscription subscriptions = 1;
}

message GrpcKafkaSubscription {
  GrpcGuid id = 1;
  GrpcKafkaSubscriptionMetadata metadata = 2;
  repeated GrpcSubscriptionPipeline pipelines = 3;
}

message GrpcSubscriptionPipeline {
  GrpcGuid id = 1;
  GrpcPipelineMetadata metadata = 2;
}