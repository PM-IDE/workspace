syntax = "proto3";

import "pipelines_and_context.proto";
import "util.proto";
import "backend_service.proto";
import "google/protobuf/empty.proto";

package ficus;

service GrpcKafkaService {
  rpc SubscribeForKafkaTopicExternal(GrpcSubscribeToKafkaAndSendToExternalServer) returns (GrpcKafkaResult);
  rpc SubscribeForKafkaTopicStream(GrpcSubscribeForKafkaTopicRequest) returns (stream GrpcPipelinePartExecutionResult);
  rpc UnsubscribeFromKafkaTopic(GrpcUnsubscribeFromKafkaRequest) returns (GrpcKafkaResult);
}

message GrpcSubscribeToKafkaAndSendToExternalServer {
  GrpcSubscribeForKafkaTopicRequest request = 1;
  string updatesProcessorHost = 2;
}

message GrpcSubscribeForKafkaTopicRequest {
  string topicName = 1;
  repeated GrpcKafkaConsumerMetadata metadata = 3;
  GrpcPipelineExecutionRequest pipelineRequest = 4;
}

message GrpcKafkaConsumerMetadata {
  string key = 1;
  string value = 2;
}

message GrpcKafkaResult {
  oneof result {
    GrpcKafkaSuccessResult success = 1;
    GrpcKafkaFailedResult failure = 2;
  }
}

message GrpcKafkaSuccessResult {
  GrpcGuid subscriptionId = 1;
}

message GrpcKafkaFailedResult {
  string errorMessage = 1;
}

message GrpcUnsubscribeFromKafkaRequest {
  GrpcGuid subscriptionId = 1;
}

service GrpcKafkaUpdatesProcessor {
  rpc StartUpdatesStream(stream GrpcKafkaUpdate) returns (google.protobuf.Empty);
}

message GrpcKafkaUpdate {
  string caseName = 1;
  repeated GrpcContextValueWithKeyName contextValues = 2;
}